// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading;
using System.Threading.Tasks;
using GitHubVulnerabilities2v3.Configuration;
using GitHubVulnerabilities2v3.Extensions;
using Moq;
using NuGet.Services.GitHub.GraphQL;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Xunit;
using NuGet.Services.Storage;
using NuGet.Services.Cursor;
using GitHubVulnerabilities2v3.Telemetry;
using Microsoft.Extensions.Logging;

namespace GitHubVulnerabilities2v3.Facts
{
    public class BlobStorageVulnerabilityWriterFacts
    {
        private readonly GitHubVulnerabilities2v3Configuration _configuration;
        private readonly Mock<IStorageFactory> _storageFactoryMock;
        private readonly Mock<ILogger<BlobStorageVulnerabilityWriter>> _loggerMock;
        private readonly Mock<ITelemetryService> _telemetryServiceMock;
        private Mock<ReadWriteCursor<DateTimeOffset>> _cursorMock;
        private Mock<AzureStorage> _storage;

        public BlobStorageVulnerabilityWriterFacts()
        {
            _configuration = new GitHubVulnerabilities2v3Configuration();
            _telemetryServiceMock = new Mock<ITelemetryService>();
            _loggerMock = new Mock<ILogger<BlobStorageVulnerabilityWriter>>();

            _storage = new Mock<AzureStorage>();
            _storage.Setup(x => x.ResolveUri(It.IsAny<string>()))
                .Returns(new Uri("MOCK"));
            _storage.Setup(x => x.ExistsAsync(It.IsAny<string>(), It.IsAny<CancellationToken>()))
                .Returns(Task.FromResult(true));
            _storage.Setup(x => x.Save(It.IsAny<Uri>(), It.IsAny<StringStorageContent>(), It.IsAny<bool>(), It.IsAny<CancellationToken>()))
                .Returns(Task.FromResult(false));

            _storageFactoryMock = new Mock<IStorageFactory>();
            _storageFactoryMock.Setup(x => x.Create(It.IsAny<string>()))
                .Returns(_storage.Object);
        }

        [Fact]
        public async Task RegenerateOnOld()
        {
            // Arrange
            var cursorMock = new Mock<ReadWriteCursor<DateTimeOffset>>();
            cursorMock.SetReturnsDefault<Task>(Task.FromResult(true));
            cursorMock.Setup(x => x.Value)
                .Returns(DateTimeOffset.UtcNow.AddDays(-31));

            var service = new BlobStorageVulnerabilityWriter(
                _storageFactoryMock.Object,
                _configuration,
                cursorMock.Object,
                _loggerMock.Object,
                _telemetryServiceMock.Object
                );

            // Act
            var runMode = await service.DetermineRunMode(cursorMock.Object);

            // Assert
            Assert.True(runMode == RunMode.Regenerate);
        }

        [Fact]
        public async Task UpdateOnNew()
        {
            // Arrange
            var cursorMock = new Mock<ReadWriteCursor<DateTimeOffset>>();
            cursorMock.SetReturnsDefault<Task>(Task.FromResult(true));
            cursorMock.Setup(x => x.Value)
                .Returns(DateTimeOffset.UtcNow.AddDays(-15));

            var service = new BlobStorageVulnerabilityWriter(
                _storageFactoryMock.Object,
                _configuration,
                cursorMock.Object,
                _loggerMock.Object,
                _telemetryServiceMock.Object
                );

            // Act
            var runMode = await service.DetermineRunMode(cursorMock.Object);

            // Assert
            Assert.True(runMode == RunMode.Update);
        }
    }
    }
}
