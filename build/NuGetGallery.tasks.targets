<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <UsingTask TaskName="RegexReplace" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
       <ParameterGroup>
           <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
           <Find ParameterType="System.String" Required="true" />
           <Replace ParameterType="System.String" Required="true" />
           <WarnOnNoMatch ParameterType="System.Boolean" Required="false" />
       </ParameterGroup>
       <Task>
           <Using Namespace="System" />
           <Using Namespace="System.IO" />
           <Using Namespace="System.Text" />
           <Using Namespace="System.Text.RegularExpressions" />
           <Using Namespace="Microsoft.Build.Framework" />
           <Using Namespace="Microsoft.Build.Utilities" />
           <Code Type="Fragment" Language="cs">
               <![CDATA[
                   try {
                       Regex regex = new Regex(Find, RegexOptions.Multiline | RegexOptions.Compiled);

                       foreach (ITaskItem file in Files) {
                           string fullPath = Path.GetFullPath(file.ItemSpec);
                           string originalText = File.ReadAllText(fullPath);
                           bool matched = regex.IsMatch(originalText);

                           if (!matched) {
                               if (WarnOnNoMatch) {
                                   Log.LogWarning("No matches for '{0}' in '{1}'.", Find, fullPath);
                               }
                           }
                           else {
                               File.SetAttributes(fullPath, File.GetAttributes(fullPath) & ~FileAttributes.ReadOnly);
                               File.WriteAllText(fullPath, regex.Replace(originalText, Replace), Encoding.UTF8);
                           }
                       }

                       return true;
                   }
                   catch (Exception ex) {
                       Log.LogErrorFromException(ex);
                       return false;
                   }
               ]]>
           </Code>
       </Task>
   </UsingTask>

   <!-- Read Git information without invoking git itself! -->
   <UsingTask TaskName="GetGitMetadata" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
       <ParameterGroup>
           <RepositoryRoot ParameterType="System.String" Required="true" />
           <Branch ParameterType="System.String" Output="true" />
           <CommitId ParameterType="System.String" Output="true" />
           <RepositoryUrl ParameterType="System.String" Output="true" />
       </ParameterGroup>
       <Task>
           <Using Namespace="System" />
           <Using Namespace="System.IO" />
           <Using Namespace="System.Text" />
           <Using Namespace="System.Text.RegularExpressions" />
           <Using Namespace="Microsoft.Build.Framework" />
           <Using Namespace="Microsoft.Build.Utilities" />
           <Code Type="Fragment" Language="cs">
            <![CDATA[
                try {
                    string headFile = Path.Combine(RepositoryRoot, @".git\HEAD");
                    if(File.Exists(headFile)) {
                      string headMarker = File.ReadAllText(headFile);
                      var match = Regex.Match(headMarker, "^ref: refs/heads/(?<branchname>.*)$");
                      if(match.Success) {
                        Branch = match.Groups["branchname"].Value.Trim();
                        string branchFile = Path.Combine(RepositoryRoot, @".git\refs\heads", Branch.Replace("/", Path.DirectorySeparatorChar.ToString()));
                        if(File.Exists(branchFile)) {
                          CommitId = File.ReadAllText(branchFile).Trim();
                        }
                      }
                    }

                    // Find the Origin entry in config
                    string configFile = Path.Combine(RepositoryRoot, @".git\config");
                    if(File.Exists(configFile)) {
                      using(var rdr = new StreamReader(configFile)) {
                        string line;
                        
                        while( ((line = rdr.ReadLine()) != null) && !String.Equals(line.Trim(), "[remote \"origin\"]", StringComparison.OrdinalIgnoreCase) ) { }

                        if(!String.IsNullOrEmpty(line) && String.Equals(line.Trim(), "[remote \"origin\"]", StringComparison.OrdinalIgnoreCase)) {
                          var match = Regex.Match(rdr.ReadLine(), @"^\s+url\s*=\s*(?<url>[^\s]*)\s*$");
                          if(match.Success) {
                            RepositoryUrl = match.Groups["url"].Value;
                            if(RepositoryUrl.EndsWith(".git")) {
                              RepositoryUrl = RepositoryUrl.Substring(0, RepositoryUrl.Length - 4);
                            }
                          }
                        }
                      }
                    }
                  }
               catch (Exception ex) {
                   Log.LogErrorFromException(ex);
                   return false;
               }
               ]]>
           </Code>
       </Task>
   </UsingTask>

   <!-- Read Git information without invoking git itself! -->
   <UsingTask TaskName="XPathSetAttribute" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
       <ParameterGroup>
           <XmlFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
           <XPath ParameterType="System.String" Required="true" />
           <Value ParameterType="System.String" Required="true" />
           <Namespaces ParameterType="System.String" Required="true" />
       </ParameterGroup>
       <Task>
           <Reference Include="System.Xml" />
           <Using Namespace="System" />
           <Using Namespace="System.Xml" />
           <Using Namespace="System.Linq" />
           <Using Namespace="Microsoft.Build.Framework" />
           <Using Namespace="Microsoft.Build.Utilities" />
           <Code Type="Fragment" Language="cs">
            <![CDATA[
              Dictionary<string, string> namespaces = Namespaces.Split(';').Select(s => {
                var arr = s.Split('=');
                return Tuple.Create(arr[0], arr[1]);
              }).ToDictionary(t => t.Item1, t => t.Item2);
              try {
                foreach (ITaskItem file in XmlFiles) {
                  string fullPath = Path.GetFullPath(file.ItemSpec);
                  var nt = new NameTable();
                  var ns = new XmlNamespaceManager(nt);
                  foreach(var pair in namespaces) {
                    ns.AddNamespace(pair.Key, pair.Value);
                  }
                  var doc = new XmlDocument();
                  doc.Load(fullPath);
                  foreach(var node in doc.SelectNodes(XPath, ns).Cast<XmlAttribute>()) {
                    node.Value = Value;
                  }
                  doc.Save(fullPath);
                }
              }
              catch (Exception ex) {
                 Log.LogErrorFromException(ex);
                 return false;
             }
             ]]>
           </Code>
       </Task>
   </UsingTask>

   <!-- Upload a file to blob storage -->
   <ItemGroup>
     <AzureStorageAssembly Include="$(MSBuildThisFileDirectory)\..\packages\WindowsAzure.Storage.*\lib\net40\Microsoft.WindowsAzure.Storage.dll" />
   </ItemGroup>
   <UsingTask TaskName="UploadBlob" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
       <ParameterGroup>
           <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
           <ConnectionString ParameterType="System.String" Required="true" />
           <Container ParameterType="System.String" Required="true" />
           <Folder ParameterType="System.String" Required="false" />
       </ParameterGroup>
       <Task>
           <Using Namespace="System" />
           <Using Namespace="System.Reflection" />
           <Using Namespace="System.IO" />
           <Using Namespace="Microsoft.Build.Framework" />
           <Using Namespace="Microsoft.Build.Utilities" />
           <Code Type="Fragment" Language="cs">
            <![CDATA[
              var asmPath = @"@(AzureStorageAssembly)";
              Assembly asm = Assembly.LoadFrom(asmPath);
              dynamic account = asm
                .GetType("Microsoft.WindowsAzure.Storage.CloudStorageAccount")
                .GetMethod("Parse", BindingFlags.Public | BindingFlags.Static)
                .Invoke(null, new object[] { ConnectionString });
              var client = account.CreateCloudBlobClient();
              var container = client.GetContainerReference(Container);
              Folder = String.IsNullOrEmpty(Folder) ? String.Empty : Folder;

              foreach(var file in Files) {
                string blobName = file.GetMetadata("Filename") + file.GetMetadata("Extension");
                if(!String.IsNullOrEmpty(Folder) && !Folder.EndsWith("/")) {
                  Folder += "/";
                }
                blobName = Folder + blobName;
                var blob = container.GetBlockBlobReference(blobName);
                using(var strm = File.OpenRead(Path.GetFullPath(file.GetMetadata("FullPath")))) {
                  blob.UploadFromStream(strm);
                }
              }
            ]]>
           </Code>
       </Task>
   </UsingTask>
   
   <!-- Download NuGet.exe -->
   <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
       <ParameterGroup>
           <OutputFilename ParameterType="System.String" Required="true" />
       </ParameterGroup>
       <Task>
           <Reference Include="System.Core" />
           <Using Namespace="System" />
           <Using Namespace="System.IO" />
           <Using Namespace="System.Net" />
           <Using Namespace="Microsoft.Build.Framework" />
           <Using Namespace="Microsoft.Build.Utilities" />
           <Code Type="Fragment" Language="cs">
               <![CDATA[
               try {
                   OutputFilename = Path.GetFullPath(OutputFilename);

                   Log.LogMessage("Downloading latest version of NuGet.exe...");
                   WebClient webClient = new WebClient();
                   webClient.DownloadFile("https://nuget.org/nuget.exe", OutputFilename);

                   return true;
               }
               catch (Exception ex) {
                   Log.LogErrorFromException(ex);
                   return false;
               }
           ]]>
           </Code>
       </Task>
   </UsingTask>
</Project>