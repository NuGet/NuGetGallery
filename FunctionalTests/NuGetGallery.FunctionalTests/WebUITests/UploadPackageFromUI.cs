//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuGetGallery.FunctionalTests
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using NuGetGallery.FunctionTests.Helpers;

    [DataSource("LogOn", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\LogonCredentials.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "LogonCredentials#csv")]
    [DataBinding("LogOn", "LogonCredentials#csv", "ï»¿UserNameOrEmail", "LogOn.LogonCredentials#csv.ï»¿UserNameOrEmail")]
    [DataBinding("LogOn", "LogonCredentials#csv", "Password", "LogOn.LogonCredentials#csv.Password")]
    public class UploadPackageFromUI : WebTest
    {

        public UploadPackageFromUI()
        {
            this.PreAuthenticate = true;
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            this.UserName = this.Context["LogOn.LogonCredentials#csv.ï»¿UserNameOrEmail"].ToString();
            this.Password = this.Context["LogOn.LogonCredentials#csv.Password"].ToString();
            ExtractHiddenFields defaultExtractionRule = ValidationRuleHelper.GetDefaultExtractHiddenFields();
         
            WebTestRequest uploadRequest = new WebTestRequest(UrlHelper.UploadPageUrl);
            uploadRequest.ThinkTime = 3;
            uploadRequest.ExpectedResponseUrl = UrlHelper.LogonPageUrlOnPackageUpload;          
            uploadRequest.ExtractValues += new EventHandler<ExtractionEventArgs>(defaultExtractionRule.Extract);
            yield return uploadRequest;
            uploadRequest = null;
                   

            WebTestRequest logonPostRequest = new WebTestRequest(UrlHelper.LogonPageUrl);
            logonPostRequest.Method = "POST";
            logonPostRequest.ExpectedResponseUrl = UrlHelper.UploadPageUrl;
            logonPostRequest.QueryStringParameters.Add("ReturnUrl", "%2fpackages%2fupload", false, false);
            FormPostHttpBody logonPostRequestBody = new FormPostHttpBody();
            logonPostRequestBody.FormPostParameters.Add("__RequestVerificationToken", this.Context["$HIDDEN1.__RequestVerificationToken"].ToString());
            logonPostRequestBody.FormPostParameters.Add(Constants.UserNameOrEmailFormField, this.UserName);
            logonPostRequestBody.FormPostParameters.Add(Constants.PasswordFormField, this.Password);
            logonPostRequest.Body = logonPostRequestBody;
            logonPostRequest.ExtractValues += new EventHandler<ExtractionEventArgs>(defaultExtractionRule.Extract);
            yield return logonPostRequest;
            logonPostRequest = null;


            // The API key is part of the nuget.config file that is present under the solution dir.
            string packageId = DateTime.Now.Ticks.ToString();
            string packageFullPath = CmdLineHelper.CreatePackage(packageId);

            

            WebTestRequest uploadPostRequest = new WebTestRequest(UrlHelper.UploadPageUrl);
            uploadPostRequest.Method = "POST";
            uploadPostRequest.ExpectedResponseUrl = UrlHelper.VerifyUploadPageUrl;
            FormPostHttpBody uploadPostBody = new FormPostHttpBody();
            uploadPostBody.FormPostParameters.Add("__RequestVerificationToken", this.Context["$HIDDEN1.__RequestVerificationToken"].ToString());
            uploadPostBody.FormPostParameters.Add(new FileUploadParameter("UploadFile", packageFullPath, "application/x-zip-compressed", true));
            uploadPostRequest.Body = uploadPostBody;
            yield return uploadPostRequest;
            uploadPostRequest = null;

            WebTestRequest verifyUploadRequest = new WebTestRequest(UrlHelper.VerifyUploadPageUrl);
            verifyUploadRequest.ExtractValues += new EventHandler<ExtractionEventArgs>(defaultExtractionRule.Extract);
            yield return verifyUploadRequest;
            verifyUploadRequest = null;
                     

            WebTestRequest verifyUploadPostRequest = new WebTestRequest(UrlHelper.VerifyUploadPageUrl);
            verifyUploadPostRequest.Method = "POST";
            verifyUploadPostRequest.ExpectedResponseUrl = UrlHelper.GetPackagePageUrl(packageId)+ "/1.0.0";
            FormPostHttpBody verifyUploadPostRequestBody = new FormPostHttpBody();
            verifyUploadPostRequestBody.FormPostParameters.Add("__RequestVerificationToken", this.Context["$HIDDEN1.__RequestVerificationToken"].ToString());
            verifyUploadPostRequestBody.FormPostParameters.Add("Listed", "true");
            verifyUploadPostRequestBody.FormPostParameters.Add("Listed", this.Context["$HIDDEN1.Listed"].ToString());
            verifyUploadPostRequest.Body = verifyUploadPostRequestBody;
            WebTestRequest verifyUploadDependentRequest = new WebTestRequest("https://s-static.ak.facebook.com/connect/xd_arbiter.php");
            verifyUploadDependentRequest.QueryStringParameters.Add("version", "18", false, false);
            verifyUploadPostRequest.DependentRequests.Add(verifyUploadDependentRequest);
            yield return verifyUploadPostRequest;
            verifyUploadPostRequest = null;

      
        }
    }
}
