// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using NuGet.Services.Entities;

namespace NuGet.Services.GitHub.Ingest
{
    public interface IVulnerabilityWriter
    {
        /// <summary>
        /// Write or stage a change to the vulnerability source.
        /// </summary>
        /// <param name="vulnerability">Vulnerability to write</param>
        /// <param name="wasWithdrawn">Whether vulnerability is a withdrawal or not.</param>
        /// <returns></returns>
        Task WriteVulnerabilityAsync(PackageVulnerability vulnerability, bool wasWithdrawn = false);

        /// <summary>
        /// Write a series of vulnerabilities to source.
        /// </summary>
        /// <param name="vulnerabilities">List of vulnerabilities to add.</param>
        /// <returns></returns>
        Task<int> WriteVulnerabilitiesAsync(IEnumerable<Tuple<PackageVulnerability, bool>> vulnerabilities);

        /// <summary>
        /// Commit changes to source
        /// Note that even if this method is unused, it should no-op instead of throw.
        /// </summary>
        /// <param name="outputFileName">Optional parameter to output to disk.</param>
        Task FlushAsync(string outputFileName = null);
    }
}
