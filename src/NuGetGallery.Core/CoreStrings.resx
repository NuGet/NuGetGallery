<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CloudAuditingService_DuplicateAuditRecord" xml:space="preserve">
    <value>Unable to write audit record: '{0}'. Record already exists.</value>
  </data>
  <data name="CommandExecutor_UnhandledCommand" xml:space="preserve">
    <value>No handler for the {0} command is registered.</value>
  </data>
  <data name="Manifest_IdTooLong" xml:space="preserve">
    <value>The package manifest contains an ID that is too long. Package IDs can be no longer than 100 characters.</value>
  </data>
  <data name="Manifest_InvalidDependency" xml:space="preserve">
    <value>The package manifest contains an invalid Dependency: '{0} {1}'</value>
  </data>
  <data name="Manifest_InvalidId" xml:space="preserve">
    <value>The package manifest contains an invalid ID: '{0}'</value>
  </data>
  <data name="Manifest_InvalidMinClientVersion" xml:space="preserve">
    <value>The package manifest contains an invalid Minimum Client Version: '{0}'</value>
  </data>
  <data name="Manifest_InvalidTargetFramework" xml:space="preserve">
    <value>The package manifest contains an invalid Target Framework: '{0}'</value>
  </data>
  <data name="Manifest_InvalidUrl" xml:space="preserve">
    <value>The package manifest contains an invalid URL</value>
  </data>
  <data name="Manifest_InvalidVersion" xml:space="preserve">
    <value>The package manifest contains an invalid Version: '{0}'</value>
  </data>
  <data name="Manifest_MissingId" xml:space="preserve">
    <value>The package manifest is missing the Id field</value>
  </data>
  <data name="StreamMustBeReadable" xml:space="preserve">
    <value>Must be a readable stream</value>
  </data>
  <data name="StreamMustBeWriteable" xml:space="preserve">
    <value>Must be a writeable stream</value>
  </data>
  <data name="StreamMustBeSeekable" xml:space="preserve">
    <value>Must be a seekable stream</value>
  </data>
  <data name="Manifest_DuplicateDependency" xml:space="preserve">
    <value>The package manifest contains a duplicate dependency: {0} {1}</value>
  </data>
  <data name="PackageMetadata_SetPropertiesFromMetadata_VersionStringInvalid" xml:space="preserve">
    <value>The version string is invalid.</value>
  </data>
  <data name="PackageMetadata_VersionStringInvalid" xml:space="preserve">
    <value>The version string '{0}' is invalid.</value>
  </data>
  <data name="Manifest_TargetFrameworkNotSupported" xml:space="preserve">
    <value>The target framework {0} is not supported.</value>
  </data>
  <data name="Http404NotFound" xml:space="preserve">
    <value>(404) Error - Not Found</value>
  </data>
  <data name="IndexDoesNotExist" xml:space="preserve">
    <value>Index does not exist</value>
  </data>
  <data name="NegativeIndexesAreInvalid" xml:space="preserve">
    <value>Negative indexes are invalid.</value>
  </data>
  <data name="Manifest_InvalidDependencyVersion" xml:space="preserve">
    <value>The package manifest contains an invalid Dependency Version: '{0}'</value>
  </data>
  <data name="CookieComplianceServiceNotInitialized" xml:space="preserve">
    <value>The cookie compliance service is not initialized.</value>
  </data>
  <data name="CookieComplianceServiceAlreadyInitialized" xml:space="preserve">
    <value>The cookie compliance service is already initialized.</value>
  </data>
  <data name="PackageIsMissingRequiredData" xml:space="preserve">
    <value>The package is missing required data.</value>
  </data>
  <data name="Manifest_DuplicateMetadataElements" xml:space="preserve">
    <value>The package manifest contains duplicate metadata elements: '{0}'</value>
    <comment>{0} is a comma-delimited list of duplicate metadata element names.</comment>
  </data>
  <data name="Manifest_InvalidBooleanMetadata" xml:space="preserve">
    <value>The package manifest contains an invalid boolean value for metadata element: '{0}'. The value should be 'true' or 'false'.</value>
    <comment>{0} is the name of the invalid boolean metadata element.</comment>
  </data>
  <data name="Manifest_InvalidMetadataElements" xml:space="preserve">
    <value>The package manifest contains invalid metadata elements: '{0}'</value>
    <comment>{0} is a comma-delimited list of invalid metadata element names.</comment>
  </data>
  <data name="ArgumentCannotBeNullOrEmpty" xml:space="preserve">
    <value>The argument cannot be null or empty.</value>
  </data>
  <data name="PackageNotFound" xml:space="preserve">
    <value>The package does not exist.</value>
  </data>
  <data name="CertificateNotFound" xml:space="preserve">
    <value>The certificate does not exist.</value>
  </data>
  <data name="CertificateThumbprintHashAlgorithmChanged" xml:space="preserve">
    <value>The thumbprint is expected to be a SHA-256 thumbprint, which is exactly 64 characters in length.  Did the hash algorithm change?</value>
  </data>
</root>