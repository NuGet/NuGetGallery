@model DisplayPackageViewModel
@{
    ViewBag.Title = "Listing Package";
    ViewBag.Tab = "Packages";
}

<h1 class="page-heading"><em>@Model.Title.Abbreviate(40) @Model.Version</em> Listing</h1>
<p class="message">
    Permanently deleting packages is not supported, but you can control how they are listed.
</p>
<p>
    Unlisting a package hides the package from search results and all NuGet commands, but packages 
    are still available for download. For example, they can still be downloaded as dependencies to 
    other packages.
</p>

@using (Html.BeginForm())
{
    <fieldset id="unlist-form" class="form">
        <legend>Edit @Model.Title Package</legend>
        @Html.AntiForgeryToken()
        <div class="form-field">
            @Html.EditorFor(package => package.Listed)
            <label for="Listed" class="checkbox">
                List @Model.Title @Model.Version in search results.
            </label>
        </div>

        <p>
            Unchecking this box means your package cannot be installed directly and it will 
            not show up in search results.
        </p>

        <input type="submit" value="Save" title="Save Changes" />
        <a class="cancel" href="@Url.Action("DisplayPackage")" title="Cancel Changes and go back to package page.">Cancel</a>
    </fieldset>
}

<h2>Why can&#8217;t I delete my package?</h2>
<p>
    Our policy is to only permanently delete NuGet packages that really need it, such as 
    packages that contain passwords, malicious/harmful code, etc. This policy is very similar 
    to the policies employed by other package managers such as 
    <a href="http://help.rubygems.org/kb/gemcutter/removing-a-published-rubygem">Ruby Gems</a>.</p>
<p>
    Unlisting the package will prevent users from finding it by searching the gallery and it will prevent the dependency resolver from discovering the package. 
    However, the package will still be available for download through <a href="http://docs.nuget.org/docs/reference/package-restore">NuGet Package Restore</a> so that existing projects referencing the package don't become broken.
</p>
<p>
    If you need the package permanently removed, click on the <a href="@Url.Action(actionName: "ReportAbuse", controllerName: "Packages", routeValues: new { id = Model.Id, version = Model.Version })" title="Contact Support">Contact Support</a> link and we'll take care 
    of it for you. PLEASE ONLY DO THIS IF THERE IS AN URGENT PROBLEM WITH THE PACKAGE. 
    (Passwords, malicious code, etc). Even if you remove it, it's prudent to immediately 
    reset any passwords/sensitive data you accidentally pushed instead of waiting for us to delete 
    the package.
</p>
