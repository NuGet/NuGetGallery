@model ManagePackageOwnersViewModel
@{
    ViewBag.Tab = "Packages";
}


<h1 class="page-heading">Manage Owners for Package "@Model.Title.Abbreviate(50)"</h1>
<div class="error message" data-bind="text: message, visible: message"></div>

<h2>Current Owners</h2>
<ul id="package-owner-list" data-bind="foreach: owners">
    <li>
        <span data-bind="text: name"></span> <em data-bind="visible: current">(that&#8217;s you!)</em> 
        <em data-bind="visible: pending">(pending approval)</em> 
        <a href="#" title="Remove as owner of @Model.Title" data-bind="visible: !current, click: $root.removeOwner">Remove</a>
    </li>
</ul>

<h2>Add Owner</h2>
<p>
    Enter an owner's username to add them as a package owner.
</p>
<p class="message">
    NOTE: All package owners have full control over their packages,
    including the ability to remove other users as owners.
</p>
@using (Html.BeginForm())
{
    <fieldset class="form">
        <legend>Add Owner</legend>
        <div class="form-field">
            <label for="newOwnerUserName">Username</label>
            <input type="text" name="newOwnerUserName" data-bind="value: newOwnerUsername" />
        </div>
        <input type="submit" value="Add" title="Add the user as an owner to @Model.Title" data-bind="click: addOwner" />
    </fieldset>
}

@section bottomScripts {
    <script src="@Url.Content("~/Scripts/knockout-2.2.1.js")"></script>
    <script src="@Url.Content("~/json/JsonApi?json")"></script>
    <script>
        $(function() {
            //TODO Move this to its own script file when we set up QUnit tests
            var failHandler = function(jqXHR, textStatus, errorThrown)  {
                alert('An unexpected error occurred! "' + errorThrown + '"');
            };

            var viewModel = {
                package: { id: '@Model.Id' },
                owners: ko.observableArray([]),
                newOwnerUsername: ko.observable(''),
                message: ko.observable(''),

                addOwner: function () {
                    var newUsername = viewModel.newOwnerUsername();

                    if (!newUsername) {
                        viewModel.message("Please enter a valid user name.");
                        return;
                    }

                    var existingOwner = ko.utils.arrayFirst(
                        viewModel.owners(),
                        function (owner) { return owner.name().toUpperCase() == newUsername.toUpperCase() });                    

                    if (existingOwner) {
                        viewModel.message("The user '" + newUsername + "' is already an owner or pending owner of this package.");
                        return;
                    }

                    var ownerInputModel =
                        {
                            username: newUsername,
                            id: viewModel.package.id
                        };

                    $mvc.JsonApi.AddPackageOwner(ownerInputModel)
                        .done(function(data) {
                            if (data.success) {
                                var newOwner = new Owner(data.name, /* pending */ true, data.current);
                                viewModel.owners.push(newOwner);

                                // reset the Username textbox
                                viewModel.newOwnerUsername('');

                                // when an operation succeeds, always clear the error message
                                viewModel.message('');
                            }
                            else {
                                viewModel.message(data.message);
                            }
                        })
                        .fail(failHandler);
                },

                removeOwner: function(item) {
                    var package = viewModel.package;
                    $mvc.JsonApi.RemovePackageOwner({ id: package.id, username: item.name() })
                        .done(function(data) {
                            if (data.success) {
                                viewModel.owners.remove(item);

                                // when an operation succeeds, always clear the error message
                                viewModel.message('');
                            } else {
                                viewModel.message(data.message);
                            }
                        }).fail(failHandler);
                }
            };
            ko.applyBindings(viewModel);

            // Load initial owners.
            $mvc.JsonApi.GetPackageOwners(viewModel.package)
                .done(function(data) {
                    viewModel.owners($.map(data, function(item) { return new Owner(item.name, item.pending, item.current); }));
                })
                .fail(failHandler);

            function Owner(name, pending, current) {
                this.name = ko.observable(name);
                this.pending = ko.observable(pending);
                this.current = current;
            }
        });
    </script>
}
