@model DisplayPackageViewModel
@{
    ViewBag.Title = Model.Title + " " + Model.Version;
    ViewBag.Tab = "Packages";
    Layout = "~/Views/Shared/TwoColumnLayout.cshtml";
    var absolutePackageUrl = Url.Absolute(Url.Package(Model.Id));
}
@section SocialMeta {
    @if (!String.IsNullOrWhiteSpace(ViewBag.FacebookAppID))
    {
        <meta property="fb:app_id" content="@ViewBag.FacebookAppID" />
    }

    <meta name="twitter:card" content="summary">
    <meta name="twitter:site" content="@("@nuget")">

    <meta property="og:title" content="@Model.Title" />
    <meta property="og:type" content="nugetgallery:package" />
    <meta property="og:url" content="@absolutePackageUrl" />
    <meta property="og:description" content="@Model.Description" />
    <meta property="og:determiner" content="a" />
    <meta property="og:image" content="@(Model.IconUrl ?? Url.Absolute("~/Content/Images/packageDefaultIcon.png"))" />
}
@section Meta {
    @if (!Model.Listed)
    {
        <meta name="robots" content="noindex">
    }
}
@section BottomScripts {
    @* Facebook SDK *@
    <div id="fb-root"></div>
    <script>
        (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            @if(!String.IsNullOrWhiteSpace(ViewBag.FacebookAppID)) {
        @:js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=@ViewBag.FacebookAppID";
                                } else {
        @:js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
                                }
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));</script>

    @* Twitter SDK *@
    <script>!function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = "//platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs); } }(document, "script", "twitter-wjs");</script>
}
@section SideColumn {
    <img class="logo" src="@(Model.IconUrl ?? Url.Absolute("~/Content/Images/packageDefaultIcon.png"))" alt="Icon for package @Model.Id" onerror="this.src = '@Url.Absolute("~/Content/Images/packageDefaultIcon.png")';" />
    <div id="stats">
        <div class="stat">
            <p class="stat-number">@Model.TotalDownloadCount.ToNuGetNumberString()</p>
            <p class="stat-label">@(Model.TotalDownloadCount == 1 ? "Download" : "Downloads")</p>
        </div>
        <div class="stat">
            <p class="stat-number">@Model.DownloadCount.ToNuGetNumberString()</p>
            <p class="stat-label">@(Model.DownloadCount == 1 ? "Download" : "Downloads") of v @Model.Version</p>
        </div>
        <div class="stat">
            <p class="stat-number">@Model.LastUpdated.ToNuGetShortDateString()</p>
            <p class="stat-label">Last published</p>
        </div>
    </div>
    <nav>
        <ul>
            @if (!String.IsNullOrEmpty(Model.ProjectUrl))
            {
                <li>
                    <a href="@Model.ProjectUrl" title="Visit the project site to learn more about this package">
                        Project Site
                    </a>
                </li>
            }
            @if (!String.IsNullOrEmpty(Model.LicenseUrl))
            {
                <li><a href="@Model.LicenseUrl" title="Make sure you agree with the license">License</a></li>
            }
            <li><a href="@Url.Action(actionName: "ContactOwners", controllerName: "Packages", routeValues: new { id = Model.Id })" title="Ask the package owners a question">Contact Owners</a></li>
            @if (Model.IsOwner(User))
            {
                <li>
                    <a href="@Url.Action(actionName: "ReportMyPackage", controllerName: "Packages", routeValues: new { id = Model.Id, version = Model.Version })" title="Contact the NuGet team for help with your package">
                        Contact Support
                    </a>
                </li>
            }
            else
            {
                <li>
                    <a href="@Url.Action(actionName: "ReportAbuse", controllerName: "Packages", routeValues: new { id = Model.Id, version = Model.Version })" title="Report the package as abusive">
                        Report Abuse
                    </a>
                </li>
            }

            <li><a href="@Url.PackageDownload(2, Model.Id, Model.Version)" title="Download the raw nupkg file." rel="nofollow">Download</a> <a href="@Url.Action(actionName: "Download", controllerName: "Packages")" title="How do I download?">(how-to)</a></li>
            <li><a class="s-clickonce" href="@Url.ExplorerDeepLink(2, Model.Id, Model.Version)" title="Explore the nupkg with the NuGet Package Explorer (IE only)" rel="nofollow">Open in Package Explorer</a></li>

            @if (Model.IsOwner(User))
            {
                <li><a href="@Url.EditPackage(Model.Id, Model.Version)">Edit Package</a></li>
                <li><a href="@Url.ManagePackageOwners(Model)">Manage Owners</a></li>
                <li><a href="@Url.DeletePackage(Model)" class="delete">Delete Package</a></li>
            }
            @if (StatisticsHelper.IsStatisticsPageAvailable)
            {
                <li><a href="@Url.StatisticsPackageDownloadByVersion(Model.Id)" title="Package Statistics">Package Statistics</a></li>
            }
        </ul>
    </nav>

    @* ** FEATURE: License Reports ** *@
    @if (Config.Features.FriendlyLicenses || User.IsAdministrator())
    {
        @* Package with license report enabled and at least one license field  OR  Owned by user *@
        if ((!Model.HideLicenseReport && (Model.LicenseNames.AnySafe() || !String.IsNullOrEmpty(Model.LicenseReportUrl))) || Model.IsOwner(User))
        {
            <div class="block">
                <h3 class="block-title">License details</h3>
                <p id="sonatypeHeader">provided by <a href="http://sonatype.com/">Sonatype</a></p>
                @if (Model.HideLicenseReport)
                {
                    <p class="block-notice">Visible only to owners</p>
                }
                @if (!Config.Features.FriendlyLicenses && User.IsAdministrator())
                {
                    <p class="block-notice">Visible only to admins</p>
                }
                @if (Model.LicenseNames.AnySafe())
                {
                    foreach (var licenseName in Model.LicenseNames)
                    {
                        if (!String.IsNullOrEmpty(licenseName))
                        {
                            <p class="@(Model.HideLicenseReport ? "fadedLicenseName" : "licenseName")">@licenseName</p>
                        }
                    }
                }
                @if (!String.IsNullOrEmpty(Model.LicenseReportUrl))
                {
                    <p><a class="@(Model.HideLicenseReport ? "block-fadedLink": "block-link")" href="@Model.LicenseReportUrl" title="Find out more details about the licenses in this package">View report</a></p>
                }
                @if (Model.IsOwner(User))
                {
                    if (!Model.LicenseNames.AnySafe() && String.IsNullOrEmpty(Model.LicenseReportUrl))
                    {
                        <p class="block-text">License information is not yet available.</p>
                    }
                    else
                    {
                        using (Html.BeginForm(actionName: "SetLicenseReportVisibility", controllerName: "Packages", routeValues: new { id = Model.Id, version = Model.Version, visible = Model.HideLicenseReport }, method: FormMethod.Post, htmlAttributes: new { @class = "form" }))
                        {
                            @Html.AntiForgeryToken()
                            <input id="enableDisableLicenseReportButton" type="submit" title="@(Model.HideLicenseReport ? "Display" : "Hide") license information provided by Sonatype CLM" value="@(Model.HideLicenseReport ? "Enable" : "Disable")" />
                        }
                    }
                }
            </div>
        }
    }

}
<div class="package-page">
    @if (Model.HasPendingMetadata)
    {
        using (Html.BeginForm(actionName: "UndoPendingEdits", controllerName: "Packages"))
        {
            @Html.AntiForgeryToken()
            <fieldset class="form">
                <p class="pending-edit-message">
                    An edit is pending for this package version. You are seeing the <em>edited</em> package description now.
                    These changes will be applied to the package file and become visible to everybody soon unless you
                    <input type="submit" value="undo pending edits" title="undo pending edits" style="display: inline; width: 200px; font-size: 1em;" />
                    first.
                </p>
            </fieldset>
        }
    }
    @if (Model.IsLastEditFailed)
    {
        <p class="failed-edit-message">
            Your last edit to this package was not successfully applied.
            You can <a href="@Url.EditPackage(Model.Id, Model.Version)">edit</a>
            the package and submit the edit again to retry the edit.
        </p>
    }
    @if (Model.Prerelease)
    {
        <p class="prerelease-message">
            This is a prerelease version of @Model.Title.Abbreviate(65).
        </p>
    }
    @if (Model.LatestStableVersion && Model.HasNewerPrerelease)
    {
        <p class="not-latest-message">
            There is a newer prerelease version of this package available. See the version list below for details.
        </p>
    }

    @if (Model.Listed && Model.IsIndexed.HasValue && !Model.IsIndexed.Value)
    {
        <p class="message warning">
            <strong>This package has not been indexed yet.</strong> It will appear in search results and will be available for install/restore after indexing is completed.
        </p>
    }

    <div class="package-page-heading">
        <h1 title="@Model.Title">@Model.Title.Abbreviate(40)</h1>
        <h2>@Model.Version</h2>
    </div>
    @foreach (var line in Model.Description.ToStringSafe().Split('\n'))
    {
        <p>@line</p>
    }

    @if (!Model.Listed)
    {
        if (Model.IsOwner(User))
        {
            <p class="message warning">
                This package is unlisted and hidden from package listings.
                You can see the package because you are one of its owners. To list the package again,
                <a href="@Url.DeletePackage(Model)">change its listing setting</a>.
            </p>
        }
        else
        {
            <p class="message warning">
                The owner has unlisted this package.
                This could mean that the package is deprecated or shouldn't be used anymore.
            </p>
        }
    }
    <p>
        To install @Model.Title, run the following command in the <a href="http://docs.nuget.org/docs/start-here/using-the-package-manager-console">
            Package Manager Console
        </a>
    </p>
    <div class="nuget-badge">
        <p>
            <code>
                PM&gt; Install-Package @Model.Id
                @if (!Model.LatestVersion || !Model.Listed)
                {
                    <text> -Version @Model.Version</text>
                }
                @if (Model.Prerelease)
                {
                    <text> -Pre </text>
                }
            </code>
        </p>
    </div>
    @if (!String.IsNullOrEmpty(Model.MinClientVersion))
    {
        <p>Requires NuGet @Model.MinClientVersion or higher.</p>
    }
    <div id="socialbuttons" style="height: 60px; display: block;">
        <div>
            <a href="https://twitter.com/share" class="twitter-share-button" data-url="@absolutePackageUrl" data-text="Check out @Model.Id on #NuGet!">Tweet</a>
        </div>
        <div class="fb-like" data-href="@absolutePackageUrl" data-send="false" data-width="450" data-show-faces="true"></div>
    </div>

    @if (!String.IsNullOrWhiteSpace(Model.ReleaseNotes))
    {
        <h3>Release Notes</h3>

        // Not actually using <pre/> because its better to have wrapping text
        <p>@Html.PreFormattedText(Model.ReleaseNotes)</p>
    }

    <h3>Owners</h3>
    @ViewHelpers.OwnersGravatar(Model.Owners, 32, Url)
    <div title="These authors' works form part of the package or its contents">
        <h3>Authors</h3>
        <p class="authors">
            @Model.Authors
        </p>
    </div>
    @if (!String.IsNullOrEmpty(Model.Copyright))
    {
        <h3>Copyright</h3>
        <p>@Model.Copyright</p>
    }
    @if (@Model.Tags.AnySafe())
    {
        <h3>Tags</h3>
        <ul class="tags">
            @foreach (var tag in Model.Tags)
            {
                <li><a href="@Url.Search("Tags:\"" + tag + "\"")" title="Search for @tag">@tag</a></li>
            }
        </ul>
    }
    @if (Model.Dependencies.DependencySets == null)
    {
        if (Model.IsOwner(User))
        {
            <h3>Dependencies</h3>
            <p>
                An error occurred processing dependencies.
                Your package can still be downloaded and installed, but dependencies cannot be shown.
                Please @Html.ActionLink("Contact Support", actionName: "ReportMyPackage", controllerName: "Packages", routeValues: new { id = Model.Id, version = Model.Version }, htmlAttributes: null) if you have questions.
            </p>
            <p>
                <strong>Note: This message is only visible to you and any other package owners.</strong>
            </p>
        }
    }
    else
    {
        <h3>Dependencies</h3>
        @Html.Partial("_PackageDependencies", Model.Dependencies)
    }
    <h3>Version History</h3>
    <table class="sexy-table">
        <thead>
            <tr>
                <th class="first">
                    Version
                </th>
                <th>
                    Downloads
                </th>
                <th class="@(Model.IsOwner(User) ? "" : "last")">
                    Last updated
                </th>
                @if (Model.IsOwner(User))
                {
                    <th class="last">Listed</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var packageVersion in Model.PackageVersions)
            {
                var rowClass = packageVersion.LatestStableVersion ? "recommended" : null;
                var cellTitle = packageVersion.LatestStableVersion ? "Latest Stable Version" : null;
                if (packageVersion.Listed || Model.IsOwner(User))
                {
                    <tr class="versionTableRow @rowClass">
                        <td class="version" title="@cellTitle">
                            @if (!packageVersion.IsCurrent(Model))
                            {
                                <a title="@packageVersion.Title @packageVersion.Version" href="@Url.Package(packageVersion) ">
                                    @packageVersion.Title.Abbreviate(20)
                                    @packageVersion.Version
                                    @if (packageVersion.LatestStableVersion)
                                    {
                                        @:(latest stable)
                                    }
                                </a>
                            }
                            else
                            {
                                <a href="@Url.Package(packageVersion)" title="@packageVersion.Title @packageVersion.Version (this version)">
                                    @packageVersion.Title.Abbreviate(20) @packageVersion.Version (this version)
                                </a>
                            }
                        </td>
                        <td class="package-version-downloads">
                            @packageVersion.DownloadCount.ToNuGetNumberString()
                        </td>
                        <td>
                            @packageVersion.LastUpdated.ToNuGetLongDateString()
                        </td>
                        @if (Model.IsOwner(User))
                        {
                            <td>
                                <a href="@Url.DeletePackage(packageVersion)" class="delete">@(packageVersion.Listed ? "yes" : "no")</a>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>