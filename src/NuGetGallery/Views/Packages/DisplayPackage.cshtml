@model DisplayPackageViewModel
@{
    ViewBag.Title = Model.Id + " " + Model.Version;
    ViewBag.Tab = "Packages";
    Layout = "~/Views/Shared/Gallery/Layout.cshtml";

    var absolutePackageUrl = Url.Absolute(Url.Package(Model.Id));

    var packageManagers = new PackageManagerViewModel[]
    {
        new PackageManagerViewModel()
        {
            Id = "package-manager",
            Name = "Package Manager",
            CommandPrefix = "PM> ",
            InstallPackageCommand = string.Format("Install-Package {0} -Version {1}", Model.Id, Model.Version)
        },

        new PackageManagerViewModel()
        {
            Id = "dotnet-cli",
            Name = ".NET CLI",
            CommandPrefix = "> ",
            InstallPackageCommand = string.Format("dotnet add package {0} --version {1}", Model.Id, Model.Version)
        },

        new ThirdPartyPackageManagerViewModel()
        {
            Id = "paket-cli",
            Name = "Paket CLI",
            CommandPrefix = "> ",
            InstallPackageCommand = string.Format("paket add {0} --version {1}", Model.Id, Model.Version),
            ContactUrl = "https://fsprojects.github.io/Paket/contact.html"
        },
    };
}
@section SocialMeta {
    @if (!String.IsNullOrWhiteSpace(ViewBag.FacebookAppID))
    {
        <meta property="fb:app_id" content="@ViewBag.FacebookAppID" />
    }

    <meta name="twitter:card" content="summary">
    <meta name="twitter:site" content="@("@nuget")">

    <meta property="og:title" content="@Model.Id @Model.Version" />
    <meta property="og:type" content="nugetgallery:package" />
    <meta property="og:url" content="@absolutePackageUrl" />
    <meta property="og:description" content="@Model.Description" />
    <meta property="og:determiner" content="a" />
    <meta property="og:image" content="@(PackageHelper.ShouldRenderUrl(Model.IconUrl) ? Model.IconUrl : Url.Absolute("~/Content/gallery/img/default-package-icon-256x256.png"))" />
}
@section Meta {
    @if (!Model.Listed || !Model.Available)
    {
        <meta name="robots" content="noindex">
    }
}

@helper VersionListDivider(int rowCount, bool versionsExpanded)
{
    if (rowCount == Constants.VisibleVersions + 1)
    {
        @:</tbody><tbody class="no-border collapse @(versionsExpanded ? "in" : string.Empty)" id="hidden-versions">
    }
}

@helper CommandTab(PackageManagerViewModel packageManager, bool active)
{
    <li role="presentation" class="@(active ? "active" : string.Empty)">
        <a href="#@packageManager.Id" aria-expanded="@(active ? "true" : "false")"
           aria-selected="@(active ? "true" : "false")"
           aria-controls="@packageManager.Id" role="tab" data-toggle="tab"
           title="Switch to tab panel which contains package installation command for @packageManager.Name">
            @packageManager.Name
        </a>
    </li>
}

@helper CommandPanel(PackageManagerViewModel packageManager, bool active)
{
    var thirdPartyPackageManager = packageManager as ThirdPartyPackageManagerViewModel;

    <div role="tabpanel" class="tab-pane @(active ? "active" : string.Empty)" id="@packageManager.Id">
        <div>
            <div class="install-script" id="@packageManager.Id-text">
                <span>
                    @packageManager.InstallPackageCommand
                </span>
            </div>
            <div class="copy-button">
                <button id="@packageManager.Id-button" class="btn btn-default btn-warning" type="button"
                        data-toggle="popover" data-placement="bottom" data-content="Copied."
                        aria-label="Copy the @packageManager.Name command">
                    <span class="ms-Icon ms-Icon--Copy" aria-hidden="true"></span>
                </button>
            </div>
        </div>
        @if (thirdPartyPackageManager != null)
        {
            @ViewHelpers.AlertWarning(
                @<text>
                    The NuGet Team does not provide support for this client.
                    Please contact its <a href="@thirdPartyPackageManager.ContactUrl">maintainers</a> for support.
                </text>)
        }
    </div>
}

<section role="main" class="container main-container page-package-details">
    <div class="row">
        <aside class="col-sm-1">
            <h3>
                <img class="package-icon img-responsive" aria-hidden="true" alt=""
                     src="@(PackageHelper.ShouldRenderUrl(Model.IconUrl) ? Model.IconUrl : Url.Absolute("~/Content/gallery/img/default-package-icon.svg"))"
                     @ViewHelpers.ImageFallback(Url.Absolute("~/Content/gallery/img/default-package-icon-256x256.png")) />
            </h3>
        </aside>
        <article class="col-sm-8 package-details-main">
            <div class="package-title">
                <h1>
                    @Html.BreakWord(Model.Id)
                    <small class="text-nowrap">@Model.FullVersion</small>

                    @if (Model.IsVerified.HasValue && Model.IsVerified.Value)
                    {
                        <img class="reserved-indicator"
                             src="~/Content/gallery/img/reserved-indicator.svg"
                             @ViewHelpers.ImageFallback(Url.Absolute("~/Content/gallery/img/reserved-indicator-25x25.png"))
                             title="@Strings.ReservedNamespace_ReservedIndicatorTooltip" />
                    }
                </h1>

                @if (!Model.Deleted && !StringComparer.OrdinalIgnoreCase.Equals(Model.Id, Model.Title))
                {
                    <div class="ms-fontSize-xl">
                        @Html.BreakWord(Model.Title)
                    </div>
                }
            </div>

            @if (!Model.Deleted && !String.IsNullOrWhiteSpace(Model.Description))
            {
                <p>@Html.PreFormattedText(Model.Description)</p>
            }

            @if (Model.Validating)
            {
                @ViewHelpers.AlertWarning(
                    @<text>
                        <strong>This package has not been published yet.</strong> It will appear in search results and
                        will be available for install/restore after both validation and indexing are complete. Package
                        validation and indexing may take up to an hour. 
                    </text>
                )
            }

            @if (Model.FailedValidation)
            {
                @ViewHelpers.AlertDanger(
                    @<text>
                        <strong>Package publishing failed.</strong> This package could not be published since package
                        validation failed. Please contact <a href="mailto:support@nuget.org">support@nuget.org</a>.
                    </text>
                )
            }

            @if (Model.Deleted)
            {
                @ViewHelpers.AlertDanger(
                    @<text>
                        <strong>This package has been deleted from the gallery.</strong> It is no longer available
                        for install/restore.
                    </text>
                )
            }

            @if (Model.Prerelease)
            {
                @ViewHelpers.AlertInfo(
                    @<text>
                        This is a prerelease version of @(Model.Id).
                    </text>
                )
            }

            @if (Model.HasNewerPrerelease)
            {
                @ViewHelpers.AlertInfo(
                    @<text>
                        There is a newer prerelease version of this package available.
                        <br /> See the version list below for details.
                    </text>
                )
            }

            @if (Model.Listed && Model.IsIndexed.HasValue && !Model.IsIndexed.Value && !Model.Validating)
            {
                @ViewHelpers.AlertWarning(
                    @<text>
                        <strong>This package has not been indexed yet.</strong> It will appear in search results
                        and will be available for install/restore after indexing is complete.
                    </text>
                )
            }

            @if (Model.IsSemVer2)
            {
                @ViewHelpers.AlertIsSemVer2Package(Model.HasSemVer2Version, Model.HasSemVer2Dependency)
            }

            @if (!Model.Listed && Model.Available)
            {
                if (Model.CanDisplayPrivateMetadata)
                {
                    @ViewHelpers.AlertWarning(
                        @<text>
                            This package is unlisted and hidden from package listings.
                            You can see the package because you are one of its owners. To list the package again,
                            <a href="@Url.DeletePackage(Model)">change its listing setting</a>.
                        </text>
                    )
                }
                else
                {
                    @ViewHelpers.AlertWarning(
                        @<text>
                            The owner has unlisted this package.
                            This could mean that the package is deprecated or shouldn't be used anymore.
                        </text>
                    )
                }
            }

            @if (!Model.Deleted && !String.IsNullOrEmpty(Model.MinClientVersion))
            {
                <p>Requires NuGet @Model.MinClientVersion or higher.</p>
            }

            @if (Model.Available)
            {
                <div class="install-tabs">
                    <ul class="nav nav-tabs" role="tablist">
                        @{ var firstPackageManager = true; }
                        @foreach (var packageManager in packageManagers)
                        {
                            @CommandTab(packageManager, active: firstPackageManager)

                            firstPackageManager = false;
                        }
                    </ul>
                    <div class="tab-content">
                        @{ firstPackageManager = true; }
                        @foreach (var packageManager in packageManagers)
                        {
                            @CommandPanel(packageManager, active: firstPackageManager)

                            firstPackageManager = false;
                        }
                    </div>
                </div>
            }

            @if (!Model.Deleted)
            {
                if (Model.ReadMeHtml != null)
                {
                    <div id="readme-collapser-container">
                        <h2>
                            <a href="#" role="button" data-toggle="collapse" data-target="#readme-container"
                               aria-expanded="true" aria-controls="readme-container" id="show-readme-container">
                                <i class="ms-Icon ms-Icon--ChevronDown" aria-hidden="true"></i>
                                <span>Documentation</span>
                            </a>
                        </h2>
                    </div>
                    <div id="readme-container" class="collapse in">
                        <div id="readme-less" class="collapse in">
                            @Html.Raw(Model.ReadMeHtml)
                        </div>
                        <div id="readme-more" class="collapse">
                            @Html.Raw(Model.ReadMeHtml)
                        </div>

                        <a href="#" role="button" data-toggle="collapse" class="icon-link" data-target="#readme-more"
                           aria-expanded="false" aria-controls="#readme-more, #readme-less"
                           id="show-readme-more" data-track="show-package-documentation">
                            <i class="ms-Icon ms-Icon--CalculatorAddition" aria-hidden="true"></i>
                            <span>Show more</span>
                        </a>
                    </div>
                }

                if (!String.IsNullOrWhiteSpace(Model.ReleaseNotes))
                {
                    <h2>Release Notes</h2>

                    <p>@Html.PreFormattedText(Model.ReleaseNotes)</p>
                }

                if (Model.Dependencies.DependencySets == null)
                {
                    if (Model.CanDisplayPrivateMetadata)
                    {
                        <h2>Dependencies</h2>
                        <p>
                            An error occurred processing dependencies.
                            Your package can still be downloaded and installed, but dependencies cannot be shown.
                            Please @Html.ActionLink("Contact Support", actionName: "ReportMyPackage", controllerName: "Packages", routeValues: new { id = Model.Id, version = Model.Version }, htmlAttributes: null) if you have any questions.
                        </p>
                        <p>
                            <strong>Note: This message is only visible to you and any other package owners.</strong>
                        </p>
                    }
                }
                else
                {
                    <h2>
                        <a href="#" role="button" data-toggle="collapse" data-target="#dependency-groups"
                           aria-expanded="@(Model.Dependencies.DependencySets.Any() ? "false" : "true")" aria-controls="dependency-groups"
                           id="show-dependency-groups">
                            <i class="ms-Icon ms-Icon--@(Model.Dependencies.DependencySets.Any() ? "ChevronRight" : "ChevronDown")"
                               aria-hidden="true"></i>
                            <span>Dependencies</span>
                        </a>
                    </h2>

                    if (Model.Dependencies.DependencySets.Any())
                    {
                        <ul class="list-unstyled panel-collapse collapse dependency-groups" id="dependency-groups">
                            @foreach (var dependencySet in Model.Dependencies.DependencySets)
                            {
                                var dependencySetTitle = dependencySet.Key;
                                <li>
                                    @if (!Model.Dependencies.OnlyHasAllFrameworks)
                                    {
                                        <h4><span>@dependencySetTitle</span></h4>
                                    }
                                    <ul class="list-unstyled dependency-group">
                                        @foreach (var dependency in dependencySet.Value)
                                        {
                                            <li>
                                                @if (dependency == null)
                                                {
                                                    @:No dependencies.
                                                }
                                                else
                                                {
                                                    <a href="@Url.Package(dependency.Id)">@dependency.Id</a>
                                                    <span>@dependency.VersionSpec</span>
                                                }
                                            </li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="collapse in" id="dependency-groups">This package has no dependencies.</p>
                    }
                }
            }

            <h2>
                <a href="#" role="button" data-toggle="collapse" data-target="#version-history"
                   aria-expanded="true" aria-controls="version-history" id="show-version-history">
                    <i class="ms-Icon ms-Icon--ChevronDown" aria-hidden="true"></i>
                    <span>Version History</span>
                </a>
            </h2>
            <div class="version-history panel-collapse collapse in" aria-expanded="true" id="version-history">
                <table class="table borderless">
                    <thead>
                        <tr>
                            <th>Version</th>
                            <th>Downloads</th>
                            <th>Last updated</th>
                            @if (Model.CanDisplayPrivateMetadata)
                            {
                                <th>Listed</th>
                                if (Config.Current.AsynchronousPackageValidationEnabled)
                                {
                                    <th>Validation Status</th>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody class="no-border">
                        @{
                            var rowCount = 0;
                            var versionsExpanded = Model
                                .PackageVersions
                                .Skip(Constants.VisibleVersions)
                                .Any(v => v.IsCurrent(Model));
                        }
                        @foreach (var packageVersion in Model.PackageVersions)
                        {
                            if ((packageVersion.Available && packageVersion.Listed)
                                || (!packageVersion.Deleted && Model.CanDisplayPrivateMetadata))
                            {
                                rowCount++;
                                @VersionListDivider(rowCount, versionsExpanded)
                                <tr>
                                    <td>
                                        @if (packageVersion.IsCurrent(Model))
                                        {
                                            <a href="@Url.Package(packageVersion)">
                                                <b>
                                                    @packageVersion.FullVersion
                                                    @if (packageVersion.IsCurrent(Model))
                                                    {
                                                        @:(current version)
                                                    }
                                                </b>
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="@Url.Package(packageVersion)">
                                                @packageVersion.FullVersion
                                            </a>
                                        }
                                    </td>
                                    <td>
                                        @packageVersion.DownloadCount.ToNuGetNumberString()
                                    </td>
                                    <td>
                                        <span data-datetime="@packageVersion.LastUpdated.ToString("O")">@packageVersion.LastUpdated.ToNuGetShortDateString()</span>
                                    </td>
                                    @if (packageVersion.CanDisplayPrivateMetadata)
                                    {
                                        <td>
                                            <a href="@Url.DeletePackage(packageVersion)">@(packageVersion.Listed ? "yes" : "no")</a>
                                        </td>
                                        if (Config.Current.AsynchronousPackageValidationEnabled)
                                        {
                                            <td>
                                                @switch (packageVersion.PackageStatus)
                                                {
                                                    case PackageStatus.Available:
                                                        @:Valid
                                                        break;
                                                    case PackageStatus.Validating:
                                                        @:Validating
                                                        break;
                                                    case PackageStatus.FailedValidation:
                                                        @:Failed validation
                                                        break;
                                                }
                                            </td>
                                        }
                                    }
                                </tr>
                            }
                            else if (packageVersion.Deleted && packageVersion.CanDisplayPrivateMetadata)
                            {
                                rowCount++;
                                @VersionListDivider(rowCount, versionsExpanded)
                                <tr class="deleted">
                                    <td class="version">
                                        @packageVersion.FullVersion (deleted)
                                    </td>
                                    <td>
                                        @packageVersion.DownloadCount
                                    </td>
                                    <td>
                                        <span data-datetime="@packageVersion.LastUpdated.ToString("O")">@packageVersion.LastUpdated.ToNuGetShortDateString()</span>
                                    </td>
                                    <td></td>
                                    @if (Config.Current.AsynchronousPackageValidationEnabled)
                                    {
                                        <td></td>
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                @if (rowCount > Constants.VisibleVersions)
                {
                    <a href="#" role="button" data-toggle="collapse" class="icon-link" data-target="#hidden-versions"
                       aria-expanded="@(versionsExpanded ? "true" : "false")" aria-controls="hidden-versions" id="show-hidden-versions">
                        <i class="ms-Icon ms-Icon--Calculator@(versionsExpanded ? "Subtract" : "Addition")" aria-hidden="true"></i>
                        <span>@(versionsExpanded ? "Show less" : "Show more")</span>
                    </a>
                }
            </div>
        </article>
        <aside class="col-sm-3 package-details-info">
            <h2>Info</h2>
            <ul class="list-unstyled ms-Icon-ul">
                <li>
                    <i class="ms-Icon ms-Icon--History" aria-hidden="true"></i>
                    last updated <span data-datetime="@Model.LastUpdated.ToString("O")">@Model.LastUpdated.ToNuGetShortDateString()</span>
                </li>
                @if (!Model.Deleted && PackageHelper.ShouldRenderUrl(Model.ProjectUrl))
                {
                    <li>
                        <i class="ms-Icon ms-Icon--Globe" aria-hidden="true"></i>
                        <a href="@Model.ProjectUrl" data-track="outbound-project-url" title="Visit the project site to learn more about this package" rel="nofollow">
                            @if (Model.ProjectUrl.Length <= 28)
                            {
                                @Model.ProjectUrl
                            }
                            else
                            {
                                @:Project Site
                            }
                        </a>
                    </li>
                }
                @if (!Model.Deleted && PackageHelper.ShouldRenderUrl(Model.LicenseUrl))
                {
                    <li>
                        <i class="ms-Icon ms-Icon--Certificate" aria-hidden="true"></i>
                        <a href="@Model.LicenseUrl" data-track="outbound-license-url" title="Make sure you agree with the license" rel="nofollow">
                            @if (Model.LicenseNames.AnySafe())
                            {
                                @(string.Join(", ", Model.LicenseNames.Select(x => x + " License")))
                            }
                            else
                            {
                                @:License Info
                            }
                        </a>
                    </li>
                }
                <li>
                    <i class="ms-Icon ms-Icon--Mail" aria-hidden="true"></i>
                    <a href="@Url.ContactOwners(Model.Id)" title="Ask the package owners a question">Contact owners</a>
                </li>
                @if (Model.CanReportAsOwner)
                {
                    <li>
                        <i class="ms-Icon ms-Icon--Help" aria-hidden="true"></i>
                        <a href="@Url.ReportPackage(Model.Id, Model.Version)" title="Contact the NuGet team for help with your package">
                            Contact support
                        </a>
                    </li>
                }
                else if (Model.Available)
                {
                    <li>
                        <i class="ms-Icon ms-Icon--Flag" aria-hidden="true"></i>
                        <a href="@Url.ReportAbuse(Model.Id, Model.Version)" title="Report the package as abusive">
                            Report
                        </a>
                    </li>
                }

                @if (Model.Available)
                {
                    <li>
                        <i class="ms-Icon ms-Icon--CloudDownload" aria-hidden="true"></i>
                        <a href="@Url.PackageDownload(2, Model.Id, Model.Version)" data-track="outbound-manual-download" title="Download the raw nupkg file." rel="nofollow">Manual download</a>
                    </li>
                    <li class="no-clickonce">
                        <i class="ms-Icon ms-Icon--OpenInNewWindow" aria-hidden="true"></i>
                        <a href="@Url.ExplorerDeepLink(2, Model.Id, Model.Version)" title="Explore the nupkg with the NuGet Package Explorer (IE only)" rel="nofollow">Open in Package Explorer</a>
                    </li>
                }

                @if ((Model.Available || Model.Validating) && Model.CanEdit)
                {
                    <li>
                        <i class="ms-Icon ms-Icon--Edit" aria-hidden="true"></i>
                        <a href="@Url.EditPackage(Model.Id, Model.Version)">Edit package</a>
                    </li>
                }
                @if (Model.CanManageOwners)
                {
                    <li>
                        <i class="ms-Icon ms-Icon--People" aria-hidden="true"></i>
                        <a href="@Url.ManagePackageOwners(Model)">Manage owners</a>
                    </li>
                }
                @if (!Model.Deleted && Model.CanUnlistOrRelist)
                {
                    <li>
                        <i class="ms-Icon ms-Icon--Delete" aria-hidden="true"></i>
                        <a href="@Url.DeletePackage(Model)" class="delete">Delete package</a>
                    </li>
                }

                @if (Model.Available && User.IsAdministrator())
                {
                    <li>
                        <i class="ms-Icon ms-Icon--Refresh" aria-hidden="true"></i>
                        <a href="@Url.ReflowPackage(Model)">Reflow package</a>
                    </li>
                }

                @if (!Model.Deleted && User.IsAdministrator() && Config.Current.AsynchronousPackageValidationEnabled)
                {
                    <li>
                        <i class="ms-Icon ms-Icon--Refresh" aria-hidden="true"></i>
                        <a href="@Url.RevalidatePackage(Model)">Revalidate package</a>
                    </li>
                }
            </ul>
            @if (Model.LicenseNames.AnySafe())
            {
                <p>License info provided by <a href="http://sonatype.com/">Sonatype</a>.</p>
            }

            <h2>Statistics</h2>
            <ul class="list-unstyled ms-Icon-ul">
                <li>
                    <i class="ms-Icon ms-Icon--Download" aria-hidden="true"></i>
                    @Model.TotalDownloadCount.ToNuGetNumberString() total @(Model.TotalDownloadCount == 1 ? "download" : "downloads")
                </li>
                <li>
                    <i class="ms-Icon ms-Icon--Giftbox" aria-hidden="true"></i>
                    @Model.PackageVersions.First().DownloadCount.ToNuGetNumberString() @(Model.PackageVersions.First().DownloadCount == 1 ? "download" : "downloads")
                    of latest version
                </li>
                <li>
                    <i class="ms-Icon ms-Icon--Financial" aria-hidden="true"></i>
                    @Model.DownloadsPerDayLabel @(Model.DownloadsPerDayLabel == "1" || Model.DownloadsPerDayLabel == "<1" ? "download" : "downloads")
                    per day (avg)
                </li>
            </ul>
            @if (StatisticsHelper.IsStatisticsPageAvailable)
            {
                <a href="@Url.StatisticsPackageDownloadByVersion(Model.Id)" title="Package Statistics">View full stats</a>
            }

            <h2>Owners</h2>
            <ul class="list-unstyled owner-list">
                @if (!Model.Owners.Any())
    {
            @ViewHelpers.AlertWarning(@<text>This package has no owners and is not being actively maintained.</text>)
}
else
{
foreach (var owner in Model.Owners)
{
            <li>
                @if (!String.IsNullOrEmpty(owner.EmailAddress))
    {
            <a href="@Url.User(owner)" title="@owner.Username">@ViewHelpers.GravatarImage(owner.EmailAddress, owner.Username, Constants.GravatarElementSize)</a>
}
                <a href="@Url.User(owner)" title="@owner.Username">
                    @owner.Username
                </a>
            </li>
}
}
            </ul>

            @if (!Model.Deleted)
            {
                if (!String.IsNullOrEmpty(Model.Authors))
                {
                    <h2>Authors</h2>
                    <p>@Model.Authors</p>
                }

                if (!String.IsNullOrEmpty(Model.Copyright))
                {
                    <h2>Copyright</h2>
                    <p>@Model.Copyright</p>
                }

                if (Model.Tags.AnySafe())
                {
                    <h2>Tags</h2>
                    <p>
                        @foreach (var tag in Model.Tags)
                        {
                            <a href="@Url.Search("Tags:\"" + tag + "\"")" title="Search for @tag" class="tag">@tag</a>
                        }
                    </p>
                }
            }

            @if (Model.Available)
            {
                <h2>Share</h2>
                var encodedText = Url.Encode(string.Format("Check out {0} on #NuGet.", Model.Id));
                <p class="share-buttons">
                    <a href="https://www.facebook.com/sharer/sharer.php?u=@absolutePackageUrl&t=@encodedText" target="_blank">
                        <img width="24" height="24" alt="Share this package on Facebook"
                             src="@Url.Absolute("~/Content/gallery/img/facebook.svg")"
                             @ViewHelpers.ImageFallback(Url.Absolute("~/Content/gallery/img/facebook-24x24.png")) />
                    </a>
                    <a href="https://twitter.com/intent/tweet?url=@absolutePackageUrl&text=@encodedText" target="_blank">
                        <img width="24" height="24" alt="Tweet this package"
                             src="@Url.Absolute("~/Content/gallery/img/twitter.svg")"
                             @ViewHelpers.ImageFallback(Url.Absolute("~/Content/gallery/img/twitter-24x24.png")) />
                    </a>
                </p>
            }
        </aside>
    </div>
</section>



@section BottomScripts {
    @{
        var packageManagersCss = string.Empty;

        foreach (var packageManager in packageManagers)
        {
            packageManagersCss += "#" + packageManager.Id + " .install-script span::before {";
            packageManagersCss += "    content: \"" + packageManager.CommandPrefix + "\"";
            packageManagersCss += "}";
        }
    }

    <style type="text/css">
        @Html.Raw(packageManagersCss)
    </style>

    <script type="text/javascript">
        var packageManagers = [@Html.Raw(string.Join(",", packageManagers.Select(pm => "\"" + pm.Id + "\"")))];
    </script>

    @Scripts.Render("~/Scripts/gallery/page-display-package.min.js")
}
