@model DisplayPackageViewModel

@helper VulnerabilityDetailList(IReadOnlyCollection<string> ids, string title, Func<string, string> getUrl)
{
    if (ids == null || !ids.Any())
    {
        return;
    }

    <b>@title</b>
    <p>
        @{
            bool isFirst = true;
        }

        @foreach (var id in ids)
        {
            if (!isFirst)
            {
                @:|
            }
            else
            {
                isFirst = false;
            }

            <a href="@getUrl(id)">@id</a>
        }
    </p>
}

<div class="deprecation-container">
    <div class="icon-text alert alert-warning">
        <div id="show-deprecation-content-container" class="deprecation-expander" tabindex="0" data-toggle="collapse" data-target="#deprecation-content-container" aria-expanded="false" aria-controls="deprecation-content-container" aria-labelledby="deprecation-container-label">
            <div class="deprecation-expander">
                <div class="deprecation-expander-icon-container">
                    <i class="deprecation-expander-icon ms-Icon ms-Icon--Warning" aria-hidden="true"></i>
                </div>

                @{
                    var isVulnerable = Model.DeprecationStatus.HasFlag(PackageDeprecationStatus.Vulnerable);
                    var isLegacy = Model.DeprecationStatus.HasFlag(PackageDeprecationStatus.Legacy);
                    var deprecationReasonString = string.Empty;
                    if (isVulnerable || isLegacy)
                    {
                        deprecationReasonString += " because it ";
                        if (isVulnerable)
                        {
                            deprecationReasonString += "has vulnerabilities";
                        }

                        if (isLegacy)
                        {
                            if (isVulnerable)
                            {
                                deprecationReasonString += " and ";
                            }

                            deprecationReasonString += "is no longer maintained by its owners";
                        }
                    }
                }
                <div id="deprecation-container-label" class="deprecation-expander-info-right">This package has been deprecated@(deprecationReasonString).</div>
            </div>

            <div class="deprecation-expander">
                @if (Model.CvssRating.HasValue)
                {
                    string ratingString;
                    if (Model.CvssRating < 4)
                    {
                        ratingString = "Low";
                    }
                    else if (Model.CvssRating < 7)
                    {
                        ratingString = "Medium";
                    }
                    else if (Model.CvssRating < 9)
                    {
                        ratingString = "High";
                    }
                    else
                    {
                        ratingString = "Critical";
                    }

                    <div class="deprecation-expander-info-right">CVSS rating: <b>@ratingString</b></div>
                }

                <div class="deprecation-expander-icon-container">
                    <i id="deprecation-expander-icon-right" class="deprecation-expander-icon deprecation-expander-info-right ms-Icon ms-Icon--ChevronDown" aria-hidden="true"></i>
                </div>
            </div>
        </div>

        <div class="deprecation-content-container collapse" id="deprecation-content-container">
            @VulnerabilityDetailList(Model.CveIds, "CVEs", (id) => string.Format(Strings.DeprecatePackage_CveUrlFormat, id))
            @VulnerabilityDetailList(Model.CweIds, "CWEs", (id) => string.Format(Strings.DeprecatePackage_CweUrlFormat, id.Substring("CWE-".Length)))

            @if (!string.IsNullOrEmpty(Model.AlternatePackageId))
            {
                string alternateUrl;
                string alternateText;
                if (string.IsNullOrEmpty(Model.AlternatePackageVersion))
                {
                    alternateUrl = Url.Package(Model.AlternatePackageId);
                    alternateText = Model.AlternatePackageId;
                }
                else
                {
                    alternateUrl = Url.Package(Model.AlternatePackageId, Model.AlternatePackageVersion);
                    alternateText = Model.AlternatePackageId + " " + Model.AlternatePackageVersion;
                }

                <b>Suggested Alternatives</b>
                <p>
                    Consider using <a href="@alternateUrl">@alternateText</a> instead of this package.
                </p>
            }

            @if (!string.IsNullOrEmpty(Model.CustomMessage))
            {
                <b>Package owner message</b>
                <p>@Model.CustomMessage</p>
            }
        </div>
    </div>
</div>