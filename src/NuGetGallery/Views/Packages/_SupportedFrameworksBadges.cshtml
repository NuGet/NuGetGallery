@using String = NuGetGallery.Strings;
@using NuGetGallery.Frameworks;
@model PackageFrameworkCompatibilityBadges
@{
    var eventName = "search-selection";
    if (ViewData.ContainsKey("eventName"))
    {
        eventName = ViewData["eventName"].ToStringOrNull();
    }

    // This view data will sometimes be null or missing. For example, the profile page uses this partial and should not
    // emit search selection events.
    int? itemIndex = null;
    int parsedItemIndex;
    if (ViewData.ContainsKey("itemIndex")
        && int.TryParse(ViewData["itemIndex"].ToStringOrNull(), out parsedItemIndex))
    {
        itemIndex = parsedItemIndex;
    }
}
@functions
{
    public enum FrameworkContext
    {
        Net,
        NetCore,
        NetStandard,
        NetFramework
    }

    public string GetBadgeTooltip(FrameworkContext context, PackageFrameworkCompatibilityData tfmCompatibilityData)
    {
        var badgeVersion = tfmCompatibilityData.Framework.GetBadgeVersion();
        string tfmType;
        switch (context)
        {
            case FrameworkContext.Net:
                tfmType = ".NET";
                break;
            case FrameworkContext.NetCore:
                tfmType = ".NET Core";
                break;
            case FrameworkContext.NetStandard:
                tfmType = ".NET Standard";
                break;
            case FrameworkContext.NetFramework:
                tfmType = ".NET Framework";
                break;
            default:
                tfmType = "";
                break;
        }

        if (badgeVersion.IsEmpty())
        {
            return string.Format(String.SupportedFrameworks_EmptyVersion_Template_Tooltip, tfmType);
        }

        var toolTipTemplate = tfmCompatibilityData.IsComputed
            ? String.SupportedFrameworks_Computed_Tooltip
            : String.SupportedFrameworks_Asset_Tooltip;

        var tfmName = tfmType + " " + badgeVersion;
        var toolTip = string.Format(toolTipTemplate, tfmName);

        return toolTip;
    }
}

<div class="framework framework-badges">
    @if (Model.Net != null)
    {
        <!-- .NET cannot be an empty version since the lowest version for this framework is "net5.0", if the package contains just "net" framework it will fall into .NET Framework badge instead.' -->
        <a href=@Url.FrameworksTab(Model.PackageId, Model.PackageVersion)
            @if (itemIndex.HasValue)
            {
                @:data-track="@eventName" data-track-value="@itemIndex" data-click-source="FrameworkBadge"
                @:data-package-id="@Model.PackageId" data-package-version="@Model.PackageVersion"
                @:data-badge-framework="@Model.Net.Framework.GetShortFolderName()" data-badge-is-computed="@Model.Net.IsComputed"
            }>
            <span class=@(Model.Net.IsComputed ? "framework-badge-computed" : "framework-badge-asset") aria-label="@GetBadgeTooltip(FrameworkContext.Net, Model.Net)" data-content="@GetBadgeTooltip(FrameworkContext.Net, Model.Net)">
                .NET @Model.Net.Framework.GetBadgeVersion()
            </span>
        </a>
    }
    @if (Model.NetCore != null)
    {
        <a href=@Url.FrameworksTab(Model.PackageId, Model.PackageVersion)
            @if (itemIndex.HasValue)
            {
                    @:data-track="@eventName" data-track-value="@itemIndex" data-click-source="FrameworkBadge"
                    @:data-package-id="@Model.PackageId" data-package-version="@Model.PackageVersion"
                    @:data-badge-framework="@Model.NetCore.Framework.GetShortFolderName()" data-badge-is-computed="@Model.NetCore.IsComputed"
            }>
            <span class=@(Model.NetCore.IsComputed ? "framework-badge-computed" : "framework-badge-asset") aria-label="@GetBadgeTooltip(FrameworkContext.NetCore, Model.NetCore)" data-content="@GetBadgeTooltip(FrameworkContext.NetCore, Model.NetCore)">
            @if (Model.NetCore.Framework.GetBadgeVersion().IsEmpty())
            {
                @:.NET Core
            }
            else
            {
                @:.NET Core @Model.NetCore.Framework.GetBadgeVersion()
            }
            </span>
        </a>
    }
    @if (Model.NetStandard != null)
    {
        <a href=@Url.FrameworksTab(Model.PackageId, Model.PackageVersion)
            @if (itemIndex.HasValue)
            {
                    @:data-track="@eventName" data-track-value="@itemIndex" data-click-source="FrameworkBadge"
                    @:data-package-id="@Model.PackageId" data-package-version="@Model.PackageVersion"
                    @:data-badge-framework="@Model.NetStandard.Framework.GetShortFolderName()" data-badge-is-computed="@Model.NetStandard.IsComputed"
            }>
            <span class=@(Model.NetStandard.IsComputed ? "framework-badge-computed" : "framework-badge-asset") aria-label="@GetBadgeTooltip(FrameworkContext.NetStandard, Model.NetStandard)" data-content="@GetBadgeTooltip(FrameworkContext.NetStandard, Model.NetStandard)">
            @if (Model.NetStandard.Framework.GetBadgeVersion().IsEmpty())
            {
                @:.NET Standard
            }
            else
            {
                @:.NET Standard @Model.NetStandard.Framework.GetBadgeVersion()
            }
            </span>
        </a>
    }
    @if (Model.NetFramework != null)
    {
        <a href=@Url.FrameworksTab(Model.PackageId, Model.PackageVersion)
            @if (itemIndex.HasValue)
            {
                    @:data-track="@eventName" data-track-value="@itemIndex" data-click-source="FrameworkBadge"
                    @:data-package-id="@Model.PackageId" data-package-version="@Model.PackageVersion"
                    @:data-badge-framework="@Model.NetFramework.Framework.GetShortFolderName()" data-badge-is-computed="@Model.NetFramework.IsComputed"
            }>
            <span class=@(Model.NetFramework.IsComputed ? "framework-badge-computed" : "framework-badge-asset") aria-label="@GetBadgeTooltip(FrameworkContext.NetFramework, Model.NetFramework)" data-content="@GetBadgeTooltip(FrameworkContext.NetFramework, Model.NetFramework)">
            @if (Model.NetFramework.Framework.GetBadgeVersion().IsEmpty())
            {
                @:.NET Framework
            }
            else
            {
                @:.NET Framework @Model.NetFramework.Framework.GetBadgeVersion()
            }
            </span>
        </a>
    }
</div>