@using PoliteCaptcha
@model ReportMyPackageViewModel
@{
    ViewBag.Title = "Contact Support about " + Model.PackageId + " " + Model.PackageVersion;
    ViewBag.Tab = "Packages";
    ViewBag.MdPageColumns = Constants.ColumnsFormMd;
    Layout = "~/Views/Shared/Gallery/Layout.cshtml";
}

<section role="main" class="container main-container page-report-abuse">
    <div class="row report-form">
        <div class="@ViewHelpers.GetColumnClasses(ViewBag)">
            @Html.Partial(
                "_PackageHeading", 
                new PackageHeadingModel(
                    Model.PackageId, 
                    Model.PackageVersion, 
                    "Contact support"))
            <br />
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.SpamPreventionFields()

                <div id="form-field-reason" class="form-group @Html.HasErrorFor(m => m.Reason)">
                    @Html.ShowLabelFor(m => m.Reason)
                    <p>Please select the reason for contacting support about this package.</p>
                    @Html.ShowEnumDropDownListFor(m => m.Reason, Model.ReasonChoices, "<Choose a reason>")
                    @Html.ShowValidationMessagesFor(m => m.Reason)
                </div>
                <div id="form-field-delete-decision" class="hidden form-group @Html.HasErrorFor(m => m.DeleteDecision)">
                    <p>Please select how you would like to proceed.</p>
                    @Html.ShowEnumDropDownListFor(m => m.DeleteDecision, "<Choose how to proceed>")
                    @Html.ShowValidationMessagesFor(m => m.DeleteDecision)
                </div>
                <div id="form-field-confirm-delete" class="hidden checkbox">
                    <label>
                        @Html.ShowCheckboxFor(m => m.DeleteConfirmation)
                        I understand that this action cannot be undone. This will permanently delete the package
                        @Model.PackageId @Model.PackageVersion and make it unavailable for download and package restore.
                        This does not allow uploading a new package with the same version.
                    </label>
                    <div class="@Html.HasErrorFor(m => m.DeleteConfirmation)">
                        @Html.ShowValidationMessagesFor(m => m.DeleteConfirmation)
                    </div>
                </div>
                <div id="form-field-message" class="form-group @Html.HasErrorFor(m => m.Message)">
                    @Html.ShowLabelFor(m => m.Message)
                    <p>
                        Please provide a detailed description of the problem.
                    </p>
                    @Html.ShowTextAreaFor(m => m.Message, 10, 50)
                    @Html.ShowValidationMessagesFor(m => m.Message)
                </div>
                <div id="form-field-copy-sender" class="form-group @Html.HasErrorFor(m => m.CopySender)">
                    @Html.ShowCheckboxFor(m => m.CopySender)
                    @Html.ShowLabelFor(m => m.CopySender)
                    @Html.ShowValidationMessagesFor(m => m.CopySender)
                </div>
                <input type="submit" class="btn btn-primary form-control" value="Submit"
                       title="Submit your problem with '@Model.PackageId'" id="Submit" />
            }
        </div>
    </div>
</section>

@section BottomScripts {
    @Html.SpamPreventionScript()
    <script type="text/javascript">
        $(function () {
            var $reason = $('#Reason');
            var $deleteDecision = $('#DeleteDecision');
            var $deleteConfirmation = $('#DeleteConfirmation');
            var $submit = $('#Submit');

            var $form = $reason.parents('form');

            var $deleteDecisionForm = $('#form-field-delete-decision');
            var $confirmDeleteForm = $('#form-field-confirm-delete');
            var $messageForm = $('#form-field-message');
            var $copySenderForm = $('#form-field-copy-sender');

            var DeleteReasonChoices = @Html.Raw(Json.Encode(Model.DeleteReasonChoices.Select(x => x.ToString())));
            var DeleteThisPackage = @Html.Raw(Json.Encode(PackageDeleteDecision.DeletePackage.ToString()));
            var allowDelete = @Html.Raw(Json.Encode(Model.AllowDelete));

            function isSubmitDisabled() {
                return !$deleteConfirmation.prop('checked')
                    && $deleteDecision.val() == DeleteThisPackage;
            }

            function reasonSelected() {
                var reason = $reason.val();
                if (reason) {
                    $form.validate().element($reason);
                }
                
                if (allowDelete
                    && DeleteReasonChoices.indexOf(reason) > -1) {
                    $deleteDecisionForm.removeClass('hidden');
                    $confirmDeleteForm.removeClass('hidden');
                } else {
                    $deleteDecisionForm.addClass('hidden');
                    $confirmDeleteForm.addClass('hidden');
                }
                
                deleteDecisionSelected();
            }

            function deleteDecisionSelected() {
                var reason = $reason.val();
                var deleteDecision = $deleteDecision.val();
                if (allowDelete
                    && DeleteReasonChoices.indexOf(reason) > -1
                    && deleteDecision == DeleteThisPackage) {
                    $messageForm.addClass('hidden');
                    $copySenderForm.addClass('hidden');
                    $confirmDeleteForm.removeClass('hidden');
                } else {
                    $messageForm.removeClass('hidden');
                    $copySenderForm.removeClass('hidden');
                    $confirmDeleteForm.addClass('hidden');
                }

                $deleteConfirmation.prop('checked', false);
                deleteConfirmationChanged();
            }

            function deleteConfirmationChanged() {
                $submit.prop('disabled', isSubmitDisabled());
                $submit.toggleClass('disabled', isSubmitDisabled());
            }

            $reason.change(reasonSelected);
            $deleteDecision.change(deleteDecisionSelected);
            $deleteConfirmation.change(deleteConfirmationChanged);
            $form.submit(function () {
                if (isSubmitDisabled()) {
                    return false;
                }
            })

            // Run custom rules to initialize the page.
            reasonSelected();
        });
    </script>
}