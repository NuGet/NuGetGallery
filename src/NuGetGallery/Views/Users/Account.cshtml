@model AccountViewModel

@helper AccordionBar(
    string groupName,
    string title,
    string subtitle = null,
    bool enabled = true,
    string formModelStatePrefix = null,
    Func<AccordionHelper, HelperResult> actions = null,
    Func<AccordionHelper, HelperResult> content = null
)
{
    Func<AccordionHelper, HelperResult> titleTemplate = null;
    if (!String.IsNullOrEmpty(title))
    {
        titleTemplate = new Func<AccordionHelper, HelperResult>(@<text>@title</text>);
    }

    Func<AccordionHelper, HelperResult> subtitleTemplate = null;
    if (!String.IsNullOrEmpty(subtitle))
    {
        subtitleTemplate = new Func<AccordionHelper, HelperResult>(@<text>@subtitle</text>);
    }

    @AccordionBar(groupName,
        titleTemplate,
        subtitleTemplate,
        enabled,
        formModelStatePrefix,
        actions,
        content)
}

@helper AccordionBar(
    string groupName,
    Func<AccordionHelper, HelperResult> title,
    Func<AccordionHelper, HelperResult> subtitle = null,
    bool enabled = true,
    string formModelStatePrefix = null,
    Func<AccordionHelper, HelperResult> actions = null,
    Func<AccordionHelper, HelperResult> content = null,
    bool expanded = false
)
{
    @* Calculate Accordion Index *@
    string dataKey = "___AccordionCounter_" + groupName;
    int lastId = (int)(HttpContext.Current.Items[dataKey] ?? 0);
    int id = lastId + 1;
    HttpContext.Current.Items[dataKey] = id;
    string name = groupName + "-" + id.ToString();

    var hlp = new AccordionHelper(name, formModelStatePrefix, expanded, this);
    <li id="@hlp.ItemId" class="accordion-item @(enabled ? "accordion-item-enabled" : "accordion-item-disabled")">
        @if (actions != null)
        {
            <div class="accordion-item-actions">
                @actions(hlp)
            </div>
        }
        <span class="accordion-item-title">
            @title(hlp)
        </span>
        @if (subtitle != null)
        {
            <span class="accordion-item-subtitle">
                @subtitle(hlp)
            </span>
        }
        @if (content != null)
        {
            <div id="@hlp.ContentDropDownId" class="accordion-item-content @(!expanded ? hlp.ContentHiddenClass : string.Empty)">
                @content(hlp)
            </div>
        }
    </li>
}

@{
    ViewBag.Title = "Edit Profile";
    var credGroups = Model.Credentials.GroupBy(c => c.Kind).ToDictionary(g => g.Key, g => g.ToList());

    CredentialViewModel apiKey = null;
    if (credGroups.ContainsKey(CredentialKind.Token))
    {
        apiKey = credGroups[CredentialKind.Token].Single();
    }

    var hasPassword = credGroups.ContainsKey(CredentialKind.Password);

    var loginCredentials = hasPassword ? 1 : 0;
    if (credGroups.ContainsKey(CredentialKind.External))
    {
        loginCredentials += credGroups[CredentialKind.External].Count;
    }

    var currentEmailAddress = CurrentUser.UnconfirmedEmailAddress ?? CurrentUser.EmailAddress;
}

<h1 class="page-heading">My NuGet.org Account</h1>

@if (!String.IsNullOrEmpty(CurrentUser.UnconfirmedEmailAddress) && !String.IsNullOrEmpty(CurrentUser.EmailAddress))
{
    <p class="message">
        You recently registered a new email address: <strong>@CurrentUser.UnconfirmedEmailAddress</strong><br />

        @if (!String.IsNullOrEmpty(CurrentUser.EmailAddress))
        {
            <text>We will continue sending notification emails to your old verified email address (@CurrentUser.EmailAddress)
            until you <a href="@Url.ConfirmationRequired()">verify your new email address.</a></text>
        }
        else
        {
            <text>We will only send you notification emails after you
                <a href="@Url.ConfirmationRequired()">verify your email address.</a><br />
            </text>
        }
    </p>
}

<text>
    <a href="https://www.research.net/r/DRPXR92?nugetgallery_user=[@CurrentUser.Username]">What do you think about NuGet.org?</a><br /><br />
</text>

@if (!CurrentUser.Confirmed)
{
    <p class="message">
        Uploading packages or contacting package owners will require that you <a href="@Url.ConfirmationRequired()">confirm your account</a>. Why not get that out of the way now?
    </p>
}

<section>
    <ul class="actionlist">
        <li class="actionlist-item">
            <a class="actionlist-item-link" href="@Url.UploadPackage()">
                <div class="actionlist-item-header">
                    <i class="icon-cloud-upload actionlist-item-header-icon"></i>
                    <span class="actionlist-item-header-text">Upload a Package</span>
                </div>
                <p class="actionlist-item-content">
                    Upload and publish your package for other NuGet users to download and enjoy.
                    You can upload multiple revisions of the same package, as long as the version
                    is different.
                </p>
            </a>
        </li>

        <li class="actionlist-item">
            <a class="actionlist-item-link" href="@Url.Action(actionName: "Packages", controllerName: "Users")">
                <div class="actionlist-item-header">
                    <i class="icon-gears actionlist-item-header-icon"></i>
                    <span class="actionlist-item-header-text">Manage my Packages</span>
                </div>
                <p class="actionlist-item-content">
                    Edit package details or Remove packages that you have previously uploaded.
                </p>
            </a>
        </li>
    </ul>
</section>

<ul id="account-accordion" class="accordion">
    @**************************
            Email Address
    **************************@
    @AccordionBar(
        groupName: "editprofile",
        title: (String.IsNullOrEmpty(CurrentUser.UnconfirmedEmailAddress) ? "Email Address" : "Pending Email Address"),
        subtitle: currentEmailAddress,
        enabled: String.IsNullOrEmpty(CurrentUser.UnconfirmedEmailAddress),
        formModelStatePrefix: "ChangeEmail",
        actions: @<text>@item.ExpandButton("Change", "Cancel")
                     @if (!String.IsNullOrEmpty(CurrentUser.EmailAddress) && !String.IsNullOrEmpty(CurrentUser.UnconfirmedEmailAddress))
                     {
                         using (Html.BeginForm("CancelChangeEmail", "Users", FormMethod.Post, new {@class = "form-inline"}))
                         {
                             <fieldset class="form">
                                 <legend>Reset to Confirmed Email Address</legend>
                                 @Html.AntiForgeryToken()
                                 <button class="btn btn-inline" type="submit">Reset to Confirmed Email Address</button>
                             </fieldset>
                         }
                     }
                  </text>,
        content: @<text>
                     @using (Html.BeginForm("ChangeEmail", "Users", FormMethod.Post, new {@class = "form-inline"}))
                     {
                         <fieldset class="form">
                             <legend>Change Email Address</legend>

                             @Html.AntiForgeryToken()
                             @Html.ValidationSummaryFor("ChangeEmail")

                             <div class="form-field">
                                 @Html.LabelFor(m => m.ChangeEmail.NewEmail)
                                 @Html.TextBoxFor(m => m.ChangeEmail.NewEmail)
                                 @Html.ValidationMessageFor(m => m.ChangeEmail.NewEmail)
                             </div>

                             @if (hasPassword)
                             {
                                 <div class="form-field">
                                     @Html.LabelFor(m => m.ChangeEmail.Password)
                                     @Html.PasswordFor(m => m.ChangeEmail.Password)
                                     @Html.ValidationMessageFor(m => m.ChangeEmail.Password)
                                 </div>
                             }

                             <img src="@Url.Content("~/Content/images/required.png")" alt="Blue border on left means required."/>

                             <input type="submit" value="Save" title="Change email address"/>
                         </fieldset>
                     }
                  </text>)

    @**************************
        Email Notifications
    **************************@
    @AccordionBar(
        groupName: "editprofile",
        title: "Email Notifications",
        enabled: true,
        actions: @<text>
                     @(CurrentUser.EmailAllowed ? "Users can contact you" : "Users can not contact you")
                     | @(CurrentUser.NotifyPackagePushed ? "Receiving package push notifications" : "Not receiving package push notifications")
                     @item.ExpandButton("Change", "Cancel")
                  </text>,
        content: @<text>
                     @using (Html.BeginRouteForm(routeName: RouteName.ChangeEmailSubscription, method: FormMethod.Post, htmlAttributes: new {@class = "form-inline"}))
                     {
                         <fieldset class="form">
                             <legend>Update Email Notifications</legend>
                             @Html.AntiForgeryToken()
                             <div class="form-field">
                                 <input name="emailAllowed" id="CurrentUser_EmailAllowed" type="checkbox" checked="@(CurrentUser.EmailAllowed)" value="true">
                                 <label class="checkbox" for="CurrentUser_EmailAllowed">Users can contact me through the <em>Contact Owners form</em></label>
                                 <p class="smaller">
                                     This subscription allows other registered users of the site to contact you
                                     about packages that you own using the <em>Contact Owners</em> form, or to request
                                     that you become an owner of their package. Unsubscribing means users cannot contact you for these reasons.
                                 </p>
                             </div>
                             <div class="form-field">
                                 <input name="notifyPackagePushed" id="CurrentUser_NotifyPackagePushed" type="checkbox" checked="@(CurrentUser.NotifyPackagePushed)" value="true">
                                 <label class="checkbox" for="CurrentUser_NotifyPackagePushed">Notify me when a package is pushed to @Config.Current.Brand using my account</label>
                                 <p class="smaller">
                                     This subscription will send a notification whenever a package is pushed using your account.
                                     We recommend to enable this subscription so that you can inspect whether a package was pushed intentional or not.
                                     Unsubscribing means no notification will be sent on push.
                                 </p>
                             </div>
                             <input type="submit" value="Save" title="Save changes to email notifications"/>
                         </fieldset>
                     }

                     <p>
                         <br/> <strong>Note:</strong> We will <em>always</em> send important account management and security notices.
                     </p>
                  </text>)

    @**************************
        Profile Picture
    **************************@
    @AccordionBar(
        groupName: "editprofile",
        title: @<text>
                   Profile Picture
                   @if (!String.IsNullOrEmpty(CurrentUser.UnconfirmedEmailAddress))
                   {
                       @:(preview)
                   }
                </text>,
        subtitle: @<text>@ViewHelpers.GravatarImage(currentEmailAddress, CurrentUser.Username, 32)</text>,
        actions: @<text>@item.ExpandLink("More Info", "Less Info")</text>,
        content: @<text>
                     @if (!String.IsNullOrEmpty(CurrentUser.UnconfirmedEmailAddress))
                     {
                         <text>This is a preview of how your profile picture will look once you have verified your
                             current email address. </text>
                     }
                     We use your verified email address and
                     <a href="http://www.gravatar.com" target="_blank">gravatar.com</a>
                     to get your profile picture.
                     <a href="http://gravatar.com" target="_blank">Go to gravatar.com</a>
                     to change your profile picture.
                  </text>)

    @**************************
        Curated Feeds
    **************************@
    @if (Model.CuratedFeeds.Any())
    {
        foreach (var curatedFeed in Model.CuratedFeeds)
        {
            @AccordionBar(
                groupName: "editprofile",
                title: "Curated Feed",
                subtitle: curatedFeed,
                actions: @<text>
                             <a class="btn btn-inline" href="@Url.RouteUrl(RouteName.CuratedFeed, new {name = curatedFeed})">
                                 Manage
                             </a>
                          </text>)
        }
    }
</ul>

<h2>Credentials</h2>
@if (hasPassword && credGroups.ContainsKey(CredentialKind.External) && credGroups[CredentialKind.External].Any())
{
    <p class="message">
        Because you have an external account registered you can remove your password below and use
        that account to sign in to @Config.Current.Brand. No more passwords to forget!
    </p>
}
    
<ul class="accordion">
    @**************************
        External Credentials
    **************************@
    @if (credGroups.ContainsKey(CredentialKind.External))
    {
        foreach (var cred in credGroups[CredentialKind.External])
        {
            @AccordionBar(
                groupName: "editprofile",
                title: cred.TypeCaption,
                subtitle: cred.Identity,
                actions: @<text>
                    @item.ExpandLink("More Info", "Less Info")
                    @if (loginCredentials > 1)
                    {
                        using (Html.BeginForm("RemoveCredential", "Users", new { credentialType = cred.Type }, FormMethod.Post, new { @class = "form-inline" }))
                        {
                            <fieldset class="form">
                                <legend>Remove @cred.TypeCaption Credential</legend>
                                @Html.AntiForgeryToken()
                                @Html.Hidden(cred.Type)
                                <button class="btn btn-inline s-confirm" type="submit" data-confirm="Are you sure you want to disassociate your @cred.AuthUI.AccountNoun? This is an irreversable action!">Remove</button>
                            </fieldset>
                        }
                    }
                </text>,
                content: @<p>
                    You can use this @cred.AuthUI.AccountNoun to sign in to @Config.Current.Brand
                </p>)
        }
    }

    @**************************
        Password
    **************************@
    @AccordionBar(
        groupName: "editprofile",
        title: (hasPassword ? "Password Login" : "Password Login Disabled"),
        enabled: hasPassword,
        formModelStatePrefix: "ChangePassword",
        actions: @<text>
            @if (hasPassword)
            {
                @item.ExpandButton("Change", "Cancel")
                if (loginCredentials > 1)
                {
                    using (Html.BeginForm("RemovePassword", "Users", FormMethod.Post, new { @class = "form-inline" }))
                    {
                        <fieldset class="form">
                            <legend>Disable Password Login</legend>
                            @Html.AntiForgeryToken()
                            <button class="btn btn-inline s-confirm" type="submit" data-confirm="Are you sure you want to disable password login and remove your password? This is an irreversable action!">Disable</button>
                        </fieldset>
                    }
                }
            }
            else if (CurrentUser.Confirmed)
            {
                using (Html.BeginForm("ChangePassword", "Users", FormMethod.Post, new { @class = "form-inline" }))
                {
                    <fieldset class="form">
                        <legend>Enable Password Login</legend>
                        @Html.AntiForgeryToken()
                        <button class="btn btn-inline" type="submit">Enable</button>
                    </fieldset>
                }
            }
        </text>,
        content: @<text>
            @using (Html.BeginForm("ChangePassword", "Users"))
            {
                <fieldset id="account-changepassword-fieldset" class="form">
                    <legend>Change Password Form</legend>

                    <p>
                        Using this form, you can change your password for @(Config.Current.Brand).
                    </p>

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummaryFor("ChangePassword")
                    <div class="form-field">
                        @Html.LabelFor(m => m.ChangePassword.OldPassword)
                        @Html.PasswordFor(m => m.ChangePassword.OldPassword)
                        @Html.ValidationMessageFor(m => m.ChangePassword.OldPassword)
                    </div>

                    <div class="form-field">
                        @Html.LabelFor(m => m.ChangePassword.NewPassword)
                        @Html.PasswordFor(m => m.ChangePassword.NewPassword)
                        @Html.ValidationMessageFor(m => m.ChangePassword.NewPassword)
                    </div>

                    <div class="form-field">
                        @Html.CheckBoxFor(m => m.ChangePassword.ResetApiKey)
                        @Html.LabelFor(m => m.ChangePassword.ResetApiKey, new { @class = "checkbox" })
                    </div>

                    <img src="@Url.Content("~/Content/images/required.png")" alt="Blue border on left means required."/>

                    <input type="submit" value="Change" title="Change password" />
                </fieldset>
            }
        </text>)

    @**************************
        API Key
    **************************@
    @{
        // has our API key been used in last ExpirationInDaysForApiKeyV1 days?
        var apiKeyHasBeenUsedRecently = apiKey == null || apiKey.HasBeenUsedInLastDays(Config.Current.ExpirationInDaysForApiKeyV1);

        // auto-expand when we just generated a new key
        var shouldExpandApiKeyAccordion = (TempData["Message"] != null && TempData["Message"].ToString().Equals(Strings.ApiKeyReset, StringComparison.OrdinalIgnoreCase));

        // or when the API key has expired
        shouldExpandApiKeyAccordion = shouldExpandApiKeyAccordion || (apiKey != null && (apiKey.HasExpired || !apiKeyHasBeenUsedRecently));
    }
    @AccordionBar(
        groupName: "editprofile",
        title: @<text>API Key</text>,
        enabled: CurrentUser.Confirmed,
        expanded: shouldExpandApiKeyAccordion,
        actions: @<text>
                @if (!CurrentUser.Confirmed)
                {
                    <text>You need to <a href="@Url.ConfirmationRequired()">confirm your account</a> before viewing your API Key</text>
                }
                else
                {
                    if (apiKey == null)
                    {
                        <text>You don't have an API key yet.</text>
                    }
                    else if (apiKey.HasExpired || !apiKeyHasBeenUsedRecently)
                    {
                        <span class="apiKeyExpired">Your API key has expired</span>
                    }
                    else
                    {
                        <text>(hidden for security purposes, <a href="#" title="Copy API key to clipboard" onclick="copyTextToClipboard('@apiKey.Value'); return false;"><i class="icon-copy"></i> copy to clipboard</a>)</text>
                    }

                    @item.ExpandLink("Show details", "Hide details")
                }
            </text>,
        content: @<text>
            <p>
                An API key provides you with a token that can identify you to @(Config.Current.Brand). The
                <a href="https://docs.nuget.org/Consume/Command-Line-Reference">NuGet command-line utility</a> allows you to
                submit a NuGet package to the gallery using your API key to authenticate.
            </p>

            @if (!CurrentUser.Confirmed)
            {
                <p>
                    To get an API Key you will need to <a href="@Url.ConfirmationRequired()">confirm your account.</a>
                </p>
            }

            @if (CurrentUser.Confirmed)
            {
                if (apiKey == null)
                {
                    <p>
                        <strong>You don't have an API key yet.</strong> Use the button below to generate an API key and start publishing packages to @(Config.Current.Brand).
                    </p>
                }
                else if (apiKey.HasExpired || !apiKeyHasBeenUsedRecently)
                {
                    <p>
                        <strong>Your API key has expired</strong> and can no longer be used to publish packages to @(Config.Current.Brand). Use the button below to generate a new API key.
                    </p>
                }
                else
                { 
                    <p>
                        <strong>Always keep your API key a secret!</strong> If your key is accidentally revealed, you can always regenerate it at any time. You can also remove the API key if necessary.
                    </p>

                    <p>
                        <span id="key" class="apiKey">
                            @apiKey.Value

                            <button class="btn btn-small" title="Copy to clipboard" type="button" onclick="copyTextToClipboard('@apiKey.Value')"><i class="icon-copy"></i></button>
                        </span>

                        @if (apiKey.Expires.HasValue)
                        {
                            <text><br />Expires on: <span class="s-localtime" data-utc="@apiKey.Expires.Value.ToJavaScriptUTC()">@apiKey.Expires.Value.ToNuGetShortDateString()</span></text>
                        }
                        else if (Model.ExpirationInDaysForApiKeyV1 > 0)
                        {
                            <text><br/>Expires when not used for @Model.ExpirationInDaysForApiKeyV1 days.</text>
                            if (apiKey.LastUsed.HasValue)
                            {
                                <text>The API key was last used <span class="s-localtime" data-utc="@apiKey.LastUsed.Value.ToJavaScriptUTC()">@apiKey.LastUsed.Value.ToNuGetShortDateString()</span>.</text>
                            }
                        }

                        @using (Html.BeginForm("RemoveCredential", "Users", FormMethod.Post, new { @class = "form-inline" }))
                        {
                            <fieldset class="form">
                                <legend>Remove API key</legend>
                                @Html.AntiForgeryToken()
                                @Html.Hidden("credentialType", CredentialTypes.ApiKeyV1)
                                <button class="btn btn-veryflat s-confirm" data-confirm="Are you sure you want to remove the API key?" type="submit">Remove API key</button>
                            </fieldset>
                        }
                    </p>
                }

                <hr/>

                using (Html.BeginForm("GenerateApiKey", "Users", FormMethod.Post, new { @class = "form-inline" }))
                {
                    <fieldset class="form">
                        <h4>@(apiKey == null ? "Generate an API Key" : "Generate a new API Key")</h4>
                        @Html.AntiForgeryToken()

                        @if (Model.ExpirationInDaysForApiKeyV1 > 0)
                        {
                            <text>Expires in:</text>
                            <select name="expirationInDays" id="expirationInDays">
                                @if (Model.ExpirationInDaysForApiKeyV1 == 365) // Shorter dropdown for NuGet.org
                                {
                                    <option value="1">1 day</option>
                                    <option value="90">90 days</option>
                                    <option value="180">180 days</option>
                                    <option value="270">270 days</option>
                                    <option value="365" selected="selected">365 days</option>
                                }
                                else
                                {
                                    <option value="1">1 day</option>
                                    for (int i = 10; i < Model.ExpirationInDaysForApiKeyV1; i += 10)
                                    {
                                        <option value="@i" @(i == Model.ExpirationInDaysForApiKeyV1 ? "selected" : string.Empty)>@i days</option>
                                    }
                                    <option value="@Model.ExpirationInDaysForApiKeyV1" selected="selected">@Model.ExpirationInDaysForApiKeyV1 days</option>
                                }
                            </select>
                        }

                        <button class="btn btn-veryflat s-confirm" data-confirm="Are you sure you want to generate a new API key? The old API key will be rendered invalid." type="submit">@(apiKey == null ? "Generate an API Key" : "Generate a new API Key")</button>
                    </fieldset><br/>
                }

                if (apiKey != null && !apiKey.HasExpired && apiKeyHasBeenUsedRecently)
                {
                    var siteRoot = Config.Current.RequireSSL
                        ? Config.Current.SiteRoot.TrimEnd('/').Replace("http://", "https://")
                        : Config.Current.SiteRoot.TrimEnd('/');

                    <hr/>

                    <h4>Example usage</h4>
                    <p>
                        The following snippet demonstrates how you can use the <a href="https://docs.nuget.org/Consume/Command-Line-Reference">NuGet</a>
                        command-line utility allows you to submit a NuGet package to the gallery:
                    </p>
                    <p>
                        <div id="account-apikeysample">
                            <div>
                                nuget.exe setApiKey @apiKey.Value

                                <button class="btn btn-small" title="Copy to clipboard" type="button" onclick="copyTextToClipboard('nuget.exe setApiKey @apiKey.Value -Source @siteRoot/api/v2/package')"><i class="icon-copy"></i></button>
                            </div>
                            <div>nuget.exe push MyPackage.1.0.nupkg -Source @siteRoot/api/v2/package</div>
                        </div>
                    </p>
                }
            }
            </text>)
</ul> 


@section bottomScripts {
    <script>
        function detectIE() {
            var ua = window.navigator.userAgent;

            var msie = ua.indexOf('MSIE ');
            if (msie > 0) {
                // IE 10 or older => return version number
                return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
            }

            var trident = ua.indexOf('Trident/');
            if (trident > 0) {
                // IE 11 => return version number
                var rv = ua.indexOf('rv:');
                return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
            }

            // other browser or edge
            return false;
        }

        // source: http://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript
        // enhancement with special case for IEs, otherwise the temp textarea will be visible
        function copyTextToClipboard(text) {
            if (detectIE()) {
                try {
                    window.clipboardData.setData('Text', text);
                    console.log('Copying text command via IE-setData');
                } catch (err) {
                    console.log('Oops, unable to copy via IE-setData');
                }
            }
            else {

                var textArea = document.createElement("textarea");

                //
                //  This styling is an extra step which is likely not required. 
                //
                // Why is it here? To ensure:
                // 1. the element is able to have focus and selection.
                // 2. if element was to flash render it has minimal visual impact.
                // 3. less flakyness with selection and copying which might occur if
                //    the textarea element is not visible.
                //
                // The likelihood is the element won't even render, not even a flash,
                // so some of these are just precautions. 
                // 
                // However in IE the element
                // is visible whilst the popup box asking the user for permission for
                // the web page to copy to the clipboard. To prevent this, we are using 
                // the detectIE workaround.

                // Place in top-left corner of screen regardless of scroll position.
                textArea.style.position = 'fixed';
                textArea.style.top = 0;
                textArea.style.left = 0;

                // Ensure it has a small width and height. Setting to 1px / 1em
                // doesn't work as this gives a negative w/h on some browsers.
                textArea.style.width = '2em';
                textArea.style.height = '2em';

                // We don't need padding, reducing the size if it does flash render.
                textArea.style.padding = 0;

                // Clean up any borders.
                textArea.style.border = 'none';
                textArea.style.outline = 'none';
                textArea.style.boxShadow = 'none';

                // Avoid flash of white box if rendered for any reason.
                textArea.style.background = 'transparent';


                textArea.value = text;

                document.body.appendChild(textArea);

                textArea.select();

                try {
                    var successful = document.execCommand('copy');
                    var msg = successful ? 'successful' : 'unsuccessful';
                    console.log('Copying text command was ' + msg);
                } catch (err) {
                    console.log('Oops, unable to copy');
                }

                document.body.removeChild(textArea);
            }

        }
    </script>
}
