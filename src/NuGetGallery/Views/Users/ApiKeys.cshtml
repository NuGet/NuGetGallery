@using NuGetGallery.Authentication
@model AccountViewModel

@Scripts.Render("~/Scripts/jquery-1.11.0.min.js")

@{
    var apiKeys = Model.Credentials.Where(c => c.Kind == CredentialKind.Token).ToList();

    // Sort the api keys by description, when a legacy api key appears first
    apiKeys.Sort((k1, k2) =>
    {
        if (k1.IsNonScopedV1ApiKey)
        {
            return -1;
        }
        if (k2.IsNonScopedV1ApiKey)
        {
            return 1;
        }

        return k1.Description.CompareTo(k2.Description);
    });

    var shouldExpendApiKeysList = apiKeys.Any(k => k.HasExpired) || TempData["NewCredentialValue"] != null;
    int emphesizedCredentialRow = int.Parse((string)TempData["ModifiedCredentialKey"] ?? "-1");
}

<text>
    <p>
        An API key is a token that can identify you to @(Config.Current.Brand). The
        <a href="https://docs.nuget.org/Consume/Command-Line-Reference">NuGet command-line utility</a> allows you to
        submit a NuGet package to the gallery using your API key to authenticate.
    </p>
    @if (!CurrentUser.Confirmed)
            {
        <p>
            To get an API Key you will need to <a href="@Url.ConfirmationRequired()">confirm your account.</a>
        </p>
    }
    @if (CurrentUser.Confirmed)
    {
        if (apiKeys.Count == 0)
        {
            <p>
                <strong>You don't have any API keys yet.</strong> Use the button below to generate an API key and start publishing packages to @(Config.Current.Brand).
            </p>
        }
        else
        {
            <p>
                <strong>Always keep your API keys a secret!</strong> If one of your keys is accidentally revealed, you can always generate a new one at any time. You can also remove existing API keys if necessary.
            </p>
            <ul class="accordion">
               @ViewHelpers.AccordionBar(
                   groupName: "manageapikeys",
                   page: this,
                   title: @<text>Manage API Keys</text>,
                   expanded: shouldExpendApiKeysList,
                   actions:  @<text> @item.ExpandLink("More Info", "Less Info") </text>,
                   content: @<text>
                    <div style="width: 59%; float: left;">
                        <table class="fancy-table" width="100%">
                            <colgroup>
                                <col span="1" style="width: 50%;">
                                <col span="1" style="width: 40%;">
                                <col span="1" style="width: 10%;">
                            </colgroup>
                            <thead>
                                <tr>
                                    <th>API key</th>
                                    <th>Expires</th>
                                </tr>
                            </thead>
                        </table>
                        <div class="scrollable-div" style="height: 150px;">
                            <table class="fancy-table selectable" id="apikeystable" width="100%">
                                <colgroup>
                                    <col span="1" style="width: 50%;">
                                    <col span="1" style="width: 38%;">
                                    <col span="1" style="width: 12%;">
                                </colgroup>
                                <tbody>
                                    @foreach (var apiKey in apiKeys)
                                    {
                                        <tr class="apiKeyRow">
                                            @Html.Hidden("emphesizedCredentialRow", emphesizedCredentialRow == apiKey.Key)
                                            <td>
                                                <span title="@apiKey.Description">@apiKey.Description</span>

                                                @Html.Hidden("allowedActions",
                                                    apiKey.Scopes == null ? "" :
                                                        string.Join(", ", apiKey.Scopes.Select(s => NuGetScopes.Describe(s.AllowedAction)).Distinct().OrderBy(s => s)))
                                                @Html.Hidden("subjects",
                                                    apiKey.Scopes == null ? "" :
                                                        string.Join(",", apiKey.Scopes.Select(s => s.Subject).Distinct().OrderBy(s => s)))
                                            </td>
                                            <td>
                                                @if (!apiKey.Expires.HasValue)
                                                {
                                                    <span class="s-localtime">Never</span>
                                                }
                                                else if (!apiKey.HasExpired)
                                                {
                                                    <span class="s-localtime" data-utc="@apiKey.Expires.Value.ToJavaScriptUTC()">@apiKey.Expires.Value.ToNuGetShortDateString()</span>
                                                }
                                                else
                                                {
                                                    <span class="apiKeyExpired">Expired</span>
                                                }
                                            </td>
                                            <td class="actions actions-wide">
                                                @if (apiKey.IsNonScopedV1ApiKey)
                                                {
                                                    <button class="btn btn-veryflat" title="Copy to clipboard" type="button" onclick="copyTextToClipboard('@apiKey.Description')"><i class="icon-copy"></i></button>
                                                }
                                                @if (!apiKey.IsNonScopedV1ApiKey)
                                                {
                                                    if (!apiKey.Expires.HasValue || !apiKey.HasExpired)
                                                    {
                                                        using (Html.BeginForm("ExpireCredential", "Users", FormMethod.Post, new {@class = "form-inline"}))
                                                        {
                                                            @Html.AntiForgeryToken()
                                                            @Html.Hidden("credentialType", CredentialTypes.ApiKeyV1)
                                                            @Html.Hidden("credentialKey", apiKey.Key)
                                                            <button title="Expire" class="btn btn-veryflat s-confirm" data-confirm="Are you sure you want to expire the API key?" type="submit"><i class="icon-off"></i></button>
                                                        }
                                                    }

                                                    using (Html.BeginForm("RegenerateCredential", "Users", FormMethod.Post, new {@class = "form-inline"}))
                                                    {
                                                        @Html.AntiForgeryToken()
                                                        @Html.Hidden("credentialType", CredentialTypes.ApiKeyV1)
                                                        @Html.Hidden("credentialKey", apiKey.Key)
                                                        <button title="Regenerate" class="btn btn-veryflat s-confirm" data-confirm="Are you sure you want to regenerate the API key?" type="submit"><i class="icon-refresh"></i></button>
                                                    }
                                                }

                                                @using (Html.BeginForm("RemoveCredential", "Users", FormMethod.Post, new {@class = "form-inline"}))
                                                {
                                                    @Html.AntiForgeryToken()
                                                    @Html.Hidden("credentialType", CredentialTypes.ApiKeyV1)
                                                    @Html.Hidden("credentialKey", apiKey.Key)
                                                    <button title="Remove" class="btn btn-veryflat s-confirm" data-confirm="Are you sure you want to remove the API key?" type="submit"><i class="icon-remove"></i></button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div style="width: 19%; float: left; margin-left: 9px">
                        <table class="fancy-table" width="100%">
                            <thead>
                                <tr>
                                    <th>Scopes</th>
                                </tr>
                            </thead>
                        </table>
                        <div class="scrollable-div" style="height: 150px;">
                            <table class="fancy-table" id="apikeyscopes" width="100%">
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                    <div style="width: 20%; float: right;">
                        <table class="fancy-table" width="100%">
                            <thead>
                            <tr>
                                <th>Packages</th>
                            </tr>
                            </thead>
                        </table>
                        <div class="scrollable-div" style="height: 150px;">
                            <table class="fancy-table" id="apikeypackages" width="100%">
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                    <div style="clear: both;"></div>
                
                    <br />            
                    @if (TempData["NewCredentialValue"] != null)
                    {
                        <p id="newCredential">
                            <i class="icon-warning-sign" style="color: red"></i>
                            <text>@TempData["Message"]</text>
                            <span id="key" class="apiKey">
                                <button class="btn btn-small" title="Copy to clipboard" type="button" onclick="copyTextToClipboard('@TempData["NewCredentialValue"]')">Click here to copy the API Key</button>
                            </span>
                        </p>
                    }
                </text>)
            </ul>
        }

        <ul class="accordion">
            @ViewHelpers.AccordionBar(
                groupName: "generateApiKey",
                page: this,
                title: @<text>Generate new API key</text>,
                actions:  @<text> @item.ExpandLink("More Info", "Less Info") </text>,
                content: @<text>
                             @using (Html.BeginForm("GenerateApiKey", "Users", FormMethod.Post, new { @class = "form-inline", @style = "width:100%" }))
                             {
                                 <fieldset class="form">
                                     @Html.AntiForgeryToken()
                                     <div class="form-field">
                                         <input type="text" name="description" id="description" placeholder="Name (e.g. 'Build server')" data-val-required="The field is required." data-val="true" />
                                         @if (Model.ExpirationInDaysForApiKeyV1 > 0)
                                         {
                                             <select name="expirationInDays" id="expirationInDays">
                                                 @if (Model.ExpirationInDaysForApiKeyV1 == 365) // Shorter dropdown for NuGet.org
                                                 {
                                                     <option value="1">1 day</option>
                                                     <option value="90">90 days</option>
                                                     <option value="180">180 days</option>
                                                     <option value="270">270 days</option>
                                                     <option value="365" selected="selected">365 days</option>
                                                 }
                                                 else
                                                 {
                                                     <option value="1">1 day</option>
                                                     for (int i = 10; i < Model.ExpirationInDaysForApiKeyV1; i += 10)
                                                     {
                                                         <option value="@i" @(i == Model.ExpirationInDaysForApiKeyV1 ? "selected" : string.Empty)>@i days</option>
                                                     }
                                                     <option value="@Model.ExpirationInDaysForApiKeyV1" selected="selected">@Model.ExpirationInDaysForApiKeyV1 days</option>
                                                 }
                                             </select>
                                         }
                                     </div>
                                     <div class="form-field">
                                         <strong>Select scopes</strong>
                                         <div class="scrollable-div" style="height: 85px">
                                             <label class="checkoboxsmall">
                                                 <input type="checkbox" name="scopes" id="scopePushNew" value="@NuGetScopes.PackagePushNew" onclick="onScopeSelected()" /> @NuGetScopes.Describe(NuGetScopes.PackagePushNew)
                                             </label>
                                             <label class="checkoboxsmall">
                                                 <input type="checkbox" name="scopes" id="scopePush" value="@NuGetScopes.PackagePush" onclick="onScopeSelected()" /> @NuGetScopes.Describe(NuGetScopes.PackagePush)
                                             </label>
                                             <label class="checkoboxsmall">
                                                 <input type="checkbox" name="scopes" id="scopeList" value="@NuGetScopes.PackageList" onclick="onScopeSelected()" /> @NuGetScopes.Describe(NuGetScopes.PackageList)
                                             </label>
                                         </div>
                                     </div>
                                     <div class="form-field" id="packagePatternInput">
                                         <input type="text" name="subjects" id="packagePattern" placeholder="Package pattern (e.g. '*' for any package)" />
                                     </div>

                                     @if (Model.Packages != null && Model.Packages.Count > 0)
                                     {
                                         <div class="form-field">
                                             <strong>Select packages</strong>
                                             <div class="scrollable-div" id="selectablePackagesList" style="max-height: 150px;">
                                                 @foreach (var package in Model.Packages)
                                                 {
                                                     <label class="checkoboxsmall"><input type="checkbox" name="subjects" value="@package" /> @package</label>
                                                 }
                                             </div>
                                         </div>
                                     }
                                     <button class="btn" type="submit" id="generateKey">Generate API Key</button>
                                 </fieldset>
                                 <br />
                             }
                          </text>)
        </ul>

        if (apiKeys.Count > 0)
        {
            var siteRoot = Config.Current.RequireSSL
            ? Config.Current.SiteRoot.TrimEnd('/').Replace("http://", "https://")
            : Config.Current.SiteRoot.TrimEnd('/');

            var exampleApiKey = "[your API key]";
            <hr />

            <h4>Example usage</h4>
            <p>
                The following snippet demonstrates how you can use the <a href="https://docs.nuget.org/Consume/Command-Line-Reference">NuGet</a>
                command-line utility allows you to submit a NuGet package to the gallery:
            </p>
            <p>
                <div id="account-apikeysample">
                    <div> nuget.exe setApiKey @exampleApiKey </div>
                    <div>nuget.exe push MyPackage.1.0.nupkg -Source @siteRoot/api/v2/package</div>
                </div>
            </p>
        }
    }
</text>

<script type="text/javascript">
        $(document).ready(function () {
            $('#apikeystable tbody tr')
            .on('click', function (event) {
                $(this).addClass('highlight').siblings().removeClass('highlight');

                var allowedActions = $(this).closest('tr').find('td')[0].children.allowedActions.value;
                var subjects = $(this).closest('tr').find('td')[0].children.subjects.value;

                var allowedActionsArray = allowedActions.split(',');
                var subjectsArray = subjects.split(',');

                var scopesTableRef = document.getElementById('apikeyscopes').getElementsByTagName('tbody')[0];
                var packagesTableRef = document.getElementById('apikeypackages').getElementsByTagName('tbody')[0];

                scopesTableRef.innerHTML = "";
                packagesTableRef.innerHTML = "";

                for (var i = 0; i < allowedActionsArray.length; i++) {

                    var newRow = scopesTableRef.insertRow();
                    var allowedActionCell = newRow.insertCell(0);

                    allowedActionCell.innerHTML = allowedActionsArray[i];
                }

                for (var i = 0; i < subjectsArray.length ; i++) {

                    var newRow = packagesTableRef.insertRow();
                    var subjectCell = newRow.insertCell(0);

                    subjectCell.innerHTML = subjectsArray[i];
                }
            });
        });
</script>
<script>
    $(document).ready(function () {
        $('#selectablePackagesList').addClass('disabled-div');
        $('#generateKey').addClass('disabled-div');
        $('#packagePatternInput').addClass('disabled-div');
    })
</script>
<script>
    function onScopeSelected() {
        var scopeListOrPushChecked = document.getElementById("scopeList").checked || document.getElementById("scopePush").checked;

        if (scopeListOrPushChecked) {
            $('#selectablePackagesList').removeClass('disabled-div');
        }
        else
        {
            $('#selectablePackagesList').addClass('disabled-div');
        }

        var anyChecked = scopeListOrPushChecked || document.getElementById("scopePushNew").checked;

        if (anyChecked) {
            $('#generateKey').removeClass('disabled-div');
            $('#packagePatternInput').removeClass('disabled-div');
        }
        else {
            $('#generateKey').addClass('disabled-div');
            $('#packagePatternInput').addClass('disabled-div');
        }
    }
</script>
<script>
    $(document)
        .ready(function() {
            $('.apiKeyRow')
                .each(function(i, obj) {
                    if (obj.children.emphesizedCredentialRow.value == "True") {
                        obj.className += " emphasise";
                        scrollIntoView(obj, '#apikeystable');
                    }
                });
        });

    function scrollIntoView(element, container) {
        var containerTop = $(container).scrollTop();
        var containerBottom = containerTop + $(container).height();
        var elemTop = element.offsetTop;
        var elemBottom = elemTop + $(element).height();
        if (elemTop < containerTop) {
            $(container).scrollTop(elemTop);
        } else if (elemBottom > containerBottom) {
            $(container).scrollTop(elemBottom - $(container).height());
        }
    }
</script>
