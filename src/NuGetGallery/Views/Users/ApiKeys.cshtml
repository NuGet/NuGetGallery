@using NuGetGallery.Authentication
@model AccountViewModel

@Scripts.Render("~/Scripts/jquery-1.11.0.min.js")
@Scripts.Render("~/Scripts/moment.min.js")

@{
    int newCredentialKey = TempData["NewCredentialValue"] != null ? int.Parse((string)TempData["ModifiedCredentialKey"]) : -1;

    var apiKeys = Model.Credentials.Where(c => c.Kind == CredentialKind.Token).ToList();

    // Sort the api keys by description, when a legacy api key appears first
    apiKeys.Sort((k1, k2) =>
    {
        if (k1.Key == newCredentialKey)
        {
            return -1;
        }

        if (k2.Key == newCredentialKey)
        {
            return 1;
        }

        if (k1.IsNonScopedV1ApiKey)
        {
            return -1;
        }
        if (k2.IsNonScopedV1ApiKey)
        {
            return 1;
        }

        return k1.Description.CompareTo(k2.Description);
    });
}

<span>
    <p>
        An API key is a token that can identify you to @(Config.Current.Brand). The
        <a href="https://docs.nuget.org/Consume/Command-Line-Reference">NuGet command-line utility</a> allows you to
        submit a NuGet package to the gallery using your API key to authenticate.
    </p>
    @if (!CurrentUser.Confirmed)
            {
        <p>
            To get an API Key you will need to <a href="@Url.ConfirmationRequired()">confirm your account.</a>
        </p>
    }
    @if (CurrentUser.Confirmed)
    {
        if (apiKeys.Count == 0)
        {
            <p>
                <strong>You don't have any API keys yet.</strong> Use the button below to generate an API key and start publishing packages to @(Config.Current.Brand).
            </p>
        }
        else
        {
            <p>
                <strong>Always keep your API keys a secret!</strong> If one of your keys is accidentally revealed, you can always generate a new one at any time. You can also remove existing API keys if necessary.
            </p>

            <h4>Manage API Keys</h4>
            <hr />
            <ul class="accordion enhanced">
                @ViewHelpers.AccordionBar(
                        groupName: "newapikey",
                        page: this,
                        title: @<text>API Keys</text>,
                        expanded: !apiKeys.Any(),
                        actions:  @<text> @item.ExpandButton("New API key", "Cancel") </text>,
                        content:  @<text>
            @using (Html.BeginForm("GenerateApiKey", "Users", FormMethod.Post, new { @class = "form-inline", @style = "width:100%" }))
                            {
                <fieldset class="form" style="width:500px">
                    @Html.AntiForgeryToken()

                    <div class="form-field">
                        <table>
                            <tr>
                                <th>Key name</th>
                                <th>Expires in</th>
                            </tr>
                            <tr>
                                <td>
                                    <input type="text" name="description" id="description" placeholder="Name (e.g. 'Build server')" data-val-required="The field is required." data-val="true" />
                                </td>
                                <td>
                                    @if (Model.ExpirationInDaysForApiKeyV1 > 0)
                                    {
                                    <select name="expirationInDays" id="expirationInDays">
                                        @if (Model.ExpirationInDaysForApiKeyV1 == 365) // Shorter dropdown for NuGet.org
                                            {
                                            <option value="1">1 day</option>
                                            <option value="90">90 days</option>
                                            <option value="180">180 days</option>
                                            <option value="270">270 days</option>
                                            <option value="365" selected="selected">365 days</option>
                                            }
                                            else
                                            {
                                            <option value="1">1 day</option>
                                                for (int i = 10; i < Model.ExpirationInDaysForApiKeyV1; i += 10)
                                                {
                                            <option value="@i" @(i == Model.ExpirationInDaysForApiKeyV1 ? "selected" : string.Empty)>@i days</option>
                                                }
                                            <option value="@Model.ExpirationInDaysForApiKeyV1" selected="selected">@Model.ExpirationInDaysForApiKeyV1 days</option>
                                            }
                                    </select>
                                    }
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="form-field">
                        <table width="100%">
                            <tr>
                                <th>Select scopes</th>
                            </tr>
                            <tr>
                                <td>
                                    <div class="scrollable-div" style="height: 75px">
                                        <label class="checkoboxsmall scopecheckbox">
                                            <input type="checkbox" name="scopes" id="scopePushNew" value="@NuGetScopes.PackagePushNew" /> @NuGetScopes.Describe(NuGetScopes.PackagePushNew)
                                        </label>
                                        <label class="checkoboxsmall scopecheckbox">
                                            <input type="checkbox" name="scopes" id="scopePush" value="@NuGetScopes.PackagePush" /> @NuGetScopes.Describe(NuGetScopes.PackagePush)
                                        </label>
                                        <label class="checkoboxsmall scopecheckbox">
                                            <input type="checkbox" name="scopes" id="scopeList" value="@NuGetScopes.PackageList" /> @NuGetScopes.Describe(NuGetScopes.PackageList)
                                        </label>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="form-field" id="packagePatternInput">
                        <table>
                            <tr>
                                <th>Glob pattern</th>
                            </tr>
                            <tr>
                                <td>
                                    <input type="text" name="subjects" id="globPattern" placeholder="Package pattern (e.g. '*' for any package)" 
                                           data-val-regex="Invalid glob pattern. See 'Examples' for further details." data-val-regex-pattern="^[\*\w_.-]*$" data-val="true" />
                                    <a href="https://aka.ms/nugetpackageglobs" target="_blank">(Examples)</a>
                                    <span data-valmsg-for="subjects" data-valmsg-replace="true"></span>
                                </td>
                            </tr>
                        </table>
                    </div>

                    @if (Model.Packages != null && Model.Packages.Count > 0)
                    {
                        <div class="form-field">
                            <table width="100%">
                                <tr>
                                    <th>Select packages</th>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="scrollable-div" id="selectablePackagesList" style="max-height: 150px;">
                                            @foreach (var package in Model.Packages)
                                            {
                                                <label class="checkoboxsmall packagecheckbox"><input type="checkbox" name="subjects" value="@package"/> @package</label>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            </table>
                        </div>
                    }

                    <button class="btn" type="submit" id="generateKey">Add key</button>
                </fieldset>
                                <br />
            }
                        </text>)
                </ul>

                <table class="details-table" width="100%">
                    <colgroup>
                        <col span="1" style="width: 5%;">
                        <col span="1" style="width: 85%;">
                        <col span="1" style="width: 10%;">
                    </colgroup>
                    <tr>
                        @foreach (var apiKey in apiKeys)
                    {
                        <tr class="apiKeyRow">
                            <td>
                                @if (apiKey.Key == newCredentialKey)
                                {
                                    <img src="~/Content/Images/icons/apiKeyNew.png"/>
                                }
                                else if (apiKey.HasExpired)
                                {
                                    <img src="~/Content/Images/icons/apiKeyExpired.png" />
                                }
                                else
                                {
                                    <img src="~/Content/Images/icons/apiKey.png" />
                                }

                            </td>
                            <td>
                                <b title="@apiKey.Description">@apiKey.Description</b><br />
                                <span>
                                    <b>Expires:</b>
                                    @if (!apiKey.Expires.HasValue)
                                    {
                                        <span class="s-localtime">Never</span>
                                    }
                                    else if (!apiKey.HasExpired)
                                    {
                                        <span class="s-relativetime" data-utc="@apiKey.Expires.Value.ToJavaScript()">@apiKey.Expires.Value.ToNuGetShortDateString()</span>
                                    }
                                    else
                                    {
                                        <span class="apiKeyExpired">Expired</span>
                                    }
                                </span><br />
                                @if (apiKey.Scopes.Any())
                                {
                                    var scopesList = apiKey.Scopes.Select(s => NuGetScopes.Describe(s.AllowedAction)).Distinct().OrderBy(s => s).ToList();
                                    var subjectsList = apiKey.Scopes.Select(s => s.Subject).Distinct().OrderBy(s => s).ToList();
                                    var globPattern = subjectsList.FirstOrDefault(x => x != null && x.Contains("*"));

                                    if (globPattern != null)
                                    {
                                        subjectsList.Remove(globPattern);
                                    }

                                    <span>
                                        <b>Scopes: </b>
                                        <span class="shortlist">@string.Join(", ", scopesList.Take(3))</span>
                                        @if (scopesList.Count > 3)
                                        {
                                            <a class="moredetails">More...</a>
                                            <ul class="longlist" >
                                                <ul>
                                                    @foreach (var scope in scopesList)
                                                    {
                                                        <li>@scope</li>
                                                    }
                                                </ul>
                                            </ul>
                                        }
                                    </span>
                                    <br />

                                    if (globPattern != null)
                                    {
                                        <span>
                                            <b>Glob pattern: </b>@globPattern
                                         </span>
                                        <br />
                                    }

                                    if (subjectsList.Any())
                                    {
                                        const int itemsPerBatch = 10;

                                        <span>
                                            <b>Packages: </b>
                                            <span class="shortlist">@string.Join(",", subjectsList.Take(3))</span>
                                            @if (subjectsList.Count > 3)
                                            {
                                                <a class="moredetails first">More...</a>
                                                <ul class="longlist">
                                                    <ul>
                                                        @for (int i = 0; i < subjectsList.Count; i++)
                                                        {
                                                            var lastInBatch = i != 0 && i%itemsPerBatch == (itemsPerBatch - 1);
                                                            <li>@subjectsList[i]

                                                                @if (lastInBatch && i != subjectsList.Count - 1)
                                                                {
                                                                    <a class="moredetails next">&nbsp;More...</a>
                                                                }
                                                            </li>
                                                        }
                                                    </ul>
                                                </ul>
                                            }
                                        </span>
                                    }
                                }
                                else
                                {
                                    <b>Scopes: </b><span>All</span><br/>
                                    <b>Packages: </b><span>All</span>
                                }
                            </td>
                            <td class="actions actions-wide">
                                @if (apiKey.IsNonScopedV1ApiKey)
                                {
                                    <button class="btn btn-veryflat" title="Copy to clipboard" type="button" onclick="copyTextToClipboard('@apiKey.Description')"><img src="~/Content/Images/icons/copy.png" /></button>
                                }
                                
                                @if (apiKey.Key == newCredentialKey)
                                {
                                    <button class="btn btn-veryflat" title="Copy to clipboard" type="button" onclick="copyTextToClipboard('@TempData["NewCredentialValue"]')"><img src="~/Content/Images/icons/copy.png" /></button>
                                }
                                @if (!apiKey.IsNonScopedV1ApiKey)
                                {
                                    if (!apiKey.Expires.HasValue || !apiKey.HasExpired)
                                    {
                                        using (Html.BeginForm("ExpireCredential", "Users", FormMethod.Post, new {@class = "form-inline"}))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden("credentialType", CredentialTypes.ApiKeyV1)
                                            @Html.Hidden("credentialKey", apiKey.Key)
                                            <button title="Disable" class="btn btn-veryflat s-confirm" data-confirm="Are you sure you want to disable the API key?" type="submit"><img src="~/Content/Images/icons/expire.png" /></button>
                                        }
                                    }

                                    using (Html.BeginForm("RegenerateCredential", "Users", FormMethod.Post, new {@class = "form-inline"}))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("credentialType", CredentialTypes.ApiKeyV1)
                                        @Html.Hidden("credentialKey", apiKey.Key)
                                        <button title="Regenerate" class="btn btn-veryflat s-confirm" data-confirm="Are you sure you want to regenerate the API key?" type="submit"><img src="~/Content/Images/icons/regenerate.png" /></button>
                                    }
                                }

                                @using (Html.BeginForm("RemoveCredential", "Users", FormMethod.Post, new {@class = "form-inline"}))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.Hidden("credentialType", CredentialTypes.ApiKeyV1)
                                    @Html.Hidden("credentialKey", apiKey.Key)
                                    <button title="Remove" class="btn btn-veryflat s-confirm" data-confirm="Are you sure you want to remove the API key?" type="submit"><img src="~/Content/Images/icons/delete.png" /></button>
                                }
                            </td>
                        </tr>
                        }
                    </table>
                    }

                    if (apiKeys.Count > 0)
                    {
                    var siteRoot = Config.Current.RequireSSL
                    ? Config.Current.SiteRoot.TrimEnd('/').Replace("http://", "https://")
                    : Config.Current.SiteRoot.TrimEnd('/');

                    var exampleApiKey = "[your API key]";
                    <hr />

                    <h4>Example usage</h4>
                    <p>
                        The following snippet demonstrates how you can use the <a href="https://docs.nuget.org/Consume/Command-Line-Reference">NuGet</a>
                        command-line utility to submit a NuGet package to the gallery:
                    </p>
                    <p>
                        <div id="account-apikeysample">
                            <div>nuget.exe setApiKey @exampleApiKey </div>
                            <div>nuget.exe push MyPackage.1.0.nupkg -Source @siteRoot/api/v2/package</div>
                        </div>
                    </p>
                    }
                    }
                    </text>
    
    
    


<script>
    $(document).ready(function () {
        $('#selectablePackagesList').addClass('disabled-div');
        $('#generateKey').addClass('disabled-div');
        $('#packagePatternInput').addClass('disabled-div');
    })
</script>
<script>
    $(document)
        .ready(function() {
            $('.scopecheckbox')
                .on('click',
                    function() {
                        var scopeListOrPushChecked = document.getElementById("scopeList").checked ||
                            document.getElementById("scopePush").checked;

                        if (scopeListOrPushChecked) {
                            $('#selectablePackagesList').removeClass('disabled-div');
                        } else {
                            $('#selectablePackagesList').addClass('disabled-div');
                        }

                        var anyChecked = scopeListOrPushChecked || document.getElementById("scopePushNew").checked;

                        if (anyChecked) {
                            $('#packagePatternInput').removeClass('disabled-div');
                        } else {
                            $('#packagePatternInput').addClass('disabled-div');
                        }
                    });
        });
</script>
<script>
    $(document).ready(function () {
        $('.moredetails.first')
            .on('click', function () {
                $(this).siblings('.shortlist').css('display', 'none');
                $(this).css('display', 'none');

                // Get the first li of the list
                var listItem = $(this).next().children(':first').children(':first');
                var count = 0;
                while (listItem.is('li') && count < 10) {
                    listItem.css('display', 'flex');
                    listItem = listItem.next();
                    count = count + 1;
                }
            });
    });

    $(document).ready(function () {
        $('.moredetails.next')
            .on('click', function () {
                $(this).css('display', 'none');

                var listItem = $(this).parent().next();
                var count = 0;
                while (listItem.is('li') && count < 10) {
                    listItem.css('display', 'flex');
                    listItem = listItem.next();
                    count = count+1;
                }
            });
    });
</script>
    
<script>
    function enableAddKeyButton() {
        var packagesWereSelected = jQuery('#selectablePackagesList input[type=checkbox]:checked').length > 0;
        var globValid = $('#globPattern').valid();
        var globEmpty = $('#globPattern').val() == null || $.trim($('#globPattern').val()) == '';

        if (!globValid) {
            $('#generateKey').addClass('disabled-div');
        }
        else if (packagesWereSelected || !globEmpty) {
            $('#generateKey').removeClass('disabled-div');
        }
        else {
            $('#generateKey').addClass('disabled-div');
        }
    }

    $(document).ready(function() {
        $('#globPattern')
            .on('input', function() {
                enableAddKeyButton();
            });
    });

    $(document).ready(function () {
        $('.packagecheckbox')
            .on('click', function () {
                enableAddKeyButton();
            });
    });
</script>
<script>
    $('.s-relativetime[data-utc]').each(function () {
        var utc = new Date($(this).data().utc);
        var text = moment(utc).local().fromNow();

        $(this).text(text);
    });
</script>
