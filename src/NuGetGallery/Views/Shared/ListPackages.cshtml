@model PackageListViewModel
@{
    ViewBag.Title = String.IsNullOrWhiteSpace(Model.SearchTerm) ? "Packages" : "Packages matching " + Model.SearchTerm;
    ViewBag.SortText = String.IsNullOrWhiteSpace(Model.SearchTerm) ? "recent installs" : "relevance";
    ViewBag.Tab = "Packages";
    ViewBag.BlockSearchEngineIndexing = !String.IsNullOrWhiteSpace(Model.SearchTerm) || Model.PageIndex != 0;
}

<section role="main" class="container main-container page-list-packages">
    <div class="row-heading clearfix">
        <div class="cell-heading">
            <h1 role="alert">
                @if (String.IsNullOrEmpty(Model.SearchTerm))
                {
                    if (Model.TotalCount == 1)
                    {
                        <text>There is 1 package</text>
                    }
                    else
                    {
                        <text>There are @Model.TotalCount.ToNuGetNumberString() packages</text>
                    }
                }
                else
                {
                    if (Model.TotalCount == 1)
                    {
                        <text>1 package </text>
                    }
                    else
                    {
                        <text>@Model.TotalCount.ToNuGetNumberString() packages </text>
                    }

                    <text>returned for @Html.BreakWord(Model.SearchTerm)</text>
                }
            </h1>
        </div>
        <div class="cell-controls">
            <a href="?q=@Model.SearchTerm@(Model.IncludePrerelease ? "&prerel=false" : "")">@(Model.IncludePrerelease ? "Hide" : "Show") prerelease</a>
        </div>
    </div>

    @if (!Model.Items.Any())
    {
        <div class="row">
            <div class="col-xs-12 clearfix">
                <div class="panel panel-default" aria-expanded="true" >
                    <div class="panel-body">
                        NuGet package search works the same on nuget.org, from the NuGet CLI, and within the NuGet Package Manager extension in Visual Studio. <br />
                        Check out our <strong><a href="https://docs.microsoft.com/nuget/consume-packages/finding-and-choosing-packages#search-syntax">Search Syntax</a></strong>.
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="list-packages" role="list">
        @{
            var itemIndex = Model.PageIndex * Model.PageSize;
            var eventName = Model.IsPreviewSearch ? "preview-search-selection" : "search-selection";
        }
        @foreach (var package in Model.Items)
        {
            @Html.Partial("_ListPackage", package, new ViewDataDictionary { { "itemIndex", itemIndex }, { "eventName", eventName } })
            itemIndex++;
        }
    </div>

    <div class="row">
        <div class="col-xs-12 clearfix">
            @ViewHelpers.PreviousNextPager(Model.Pager)
        </div>
    </div>
</section>

@section bottomScripts {
    <script type="text/javascript">
        // Used to track how long the user waited before clicking a search selection.
        var pageLoadTime = Date.now();

        // Used to track how many selections were made on this page. Multiple selections can happen if the user opens
        // a search selection in a new tab, instead of navigating away from this page.
        var sincePageLoadCount = 0;
        @{
            var searchId = Guid.NewGuid().ToString();
            var category = Model.IsPreviewSearch ? "preview-search-page" : "search-page";
            var action = Model.IncludePrerelease ? "search-prerel" : "search-stable";

            // Emit an event representing the search page and the page index. This make it easier for the search selection
            // event to be correlated in Google Analytics.
            <text>
            window.nuget.sendAnalyticsEvent('@category', '@action', @Html.Raw(Json.Encode(Model.SearchTerm)), @Model.PageIndex);
            window.nuget.sendAiMetric('BrowserSearchPage', @Model.PageIndex, {
                SearchId: '@searchId',
                SearchTerm: @Html.Raw(Json.Encode(Model.SearchTerm)),
                IncludePrerelease: '@Model.IncludePrerelease',
                PageIndex: @Model.PageIndex,
                TotalCount: @Model.TotalCount,
                IsPreviewSearch: '@Model.IsPreviewSearch'
            });
            </text>
        }

        $(function () {
            var emitAiClickEvent = function () {
                if (!window.nuget.isAiAvailable()) {
                    return;
                }

                var $this = $(this);
                var data = $this.data();
                if ($this.attr('href') && data.track) {
                    window.nuget.sendAiMetric('BrowserSearchSelection', data.trackValue, {
                        SearchId: '@searchId',
                        SearchTerm: @Html.Raw(Json.Encode(Model.SearchTerm)),
                        IncludePrerelease: '@Model.IncludePrerelease',
                        PageIndex: @Model.PageIndex,
                        TotalCount: @Model.TotalCount,
                        ClickIndex: data.trackValue,
                        PackageId: data.packageId,
                        PackageVersion: data.packageVersion,
                        UseVersion: data.useVersion,
                        SincePageLoadMs: Date.now() - pageLoadTime,
                        SincePageLoadCount: sincePageLoadCount,
                        IsPreviewSearch: '@Model.IsPreviewSearch'
                    });

                    sincePageLoadCount++;
                }
            };
            $.each($('a[data-track]'), function () {
                $(this).on('mouseup', function (e) {
                    if (e.which === 2) { // Middle-mouse click
                        emitAiClickEvent.call(this, e);
                    }
                });
                $(this).on('click', function (e) {
                    emitAiClickEvent.call(this, e);
                });
            });
        });
    </script>
}
