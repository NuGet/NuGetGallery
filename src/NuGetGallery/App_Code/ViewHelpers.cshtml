@using System.Web.Mvc
@using Microsoft.Web.Helpers
@using NuGetGallery
@using NuGetGallery.Helpers
@using NuGetGallery.Configuration

@helper PreviousNextPager(IPreviousNextPager pager)
{
    if (pager.HasNextPage || pager.HasPreviousPage)
    {
        <ul class="pager">
            <li class="previous">
                @if (pager.HasPreviousPage)
                {
                    <a href="@pager.PreviousPageUrl" title="Go to the previous page.">Previous</a>
                }
                else
                {
                    <text>Previous</text>
                }
            </li>
            <li class="next">
                @if (pager.HasNextPage)
                {
                    <a href="@pager.NextPageUrl" title="Go to the next page.">Next</a>
                }
                else
                {
                    <text>Next</text>
                }
            </li>
        </ul>
    }
}

@helper Option(string value, string label, string currentValue)
{
    <option value="@value" @if (value == currentValue)
                           {
                               <text>selected="selected"</text>
                           }>@label</option>
}

@helper UploadSequence(int currentStep)
{
    <ol class="sequence">
        @SequenceStep(1, "Upload", currentStep)
        @SequenceStep(2, "Verify Details", currentStep)
    </ol>
    <div class="clear-fix"><!--Sad Panda--></div>
}

@helper SequenceStep(int step, string caption, int currentStep)
{
    if (currentStep > step)
    {
        <li class="past">@caption</li>
    }
    else if (currentStep == step)
    {
        <li class="current">@caption</li>
    }
    else
    {
        <li>@caption</li>
    }
}

@helper OwnersGravatar(IEnumerable<User> owners, int size, UrlHelper url, bool showName = true)
{
    <ul class="owners">
        @foreach (var owner in owners)
        {
            <li>
                @OwnerGravatar(owner, size, url, showName)
            </li>
        }
    </ul>
}

@helper OwnerGravatar(User owner, int size, UrlHelper url, bool showName = true)
{
    <a class="owner" href="@url.User(owner)" title="@owner.Username">
        @if (!String.IsNullOrEmpty(owner.EmailAddress))
        {
            @GravatarImage(owner.EmailAddress, owner.Username, size)
        }
        @if (showName)
        {
            <span class="owner-name">@owner.Username</span>
        }
    </a>
}

@helper GravatarImage(string email, string username, int size)
{
    var gravatarHtml = Gravatar.GetHtml(email, size, "retro", GravatarRating.G, attributes: new { width = size, height = size, title = username, @class = "owner-image" });
    if (gravatarHtml != null && Request.IsSecureConnection)
    {
        gravatarHtml = new HtmlString(gravatarHtml.ToHtmlString().Replace("http://www.gravatar.com/", "https://secure.gravatar.com/"));
    }
    @gravatarHtml
}

@helper WriteMeta(string name, string val) {
    if(!String.IsNullOrEmpty(val)) {
        <meta name="deployment-@name" content="@val" />
    }
}

@helper ReleaseMeta() {
    // Get Version info
    var ver = ApplicationVersionHelper.GetVersion();

    if(ver.Present) {
        WriteMeta("branch", ver.Branch);
        WriteMeta("commit", ver.ShortCommit);
        WriteMeta("time", ver.BuildDateUtc == DateTime.MinValue ? null : ver.BuildDateUtc.ToString("O"));
    }
}

@helper InstrumentationScript()
{
    // Get instrumentation key
    var config = DependencyResolver.Current.GetService<IGalleryConfigurationService>();
    var iKey = config == null ? string.Empty : config.Current.AppInsightsInstrumentationKey;
    var samplingPct = config == null ? 100 : config.Current.AppInsightsSamplingPercentage;

    if (!string.IsNullOrEmpty(iKey))
    {
        <!-- Telemetry -->
        <script type="text/javascript">
            var appInsights = window.appInsights || function (config) {
                function s(config) {
                    t[config] = function () {
                        var i = arguments;
                        t.queue.push(function () { t[config].apply(t, i) })
                    }
                }

                var t = { config: config }, r = document, f = window, e = "script", o = r.createElement(e), i, u;
                for (o.src = config.url || "//az416426.vo.msecnd.net/scripts/a/ai.0.js", r.getElementsByTagName(e)[0].parentNode.appendChild(o), t.cookie = r.cookie, t.queue = [], i = ["Event", "Exception", "Metric", "PageView", "Trace"]; i.length;) s("track" + i.pop());
                return config.disableExceptionTracking || (i = "onerror", s("_" + i), u = f[i], f[i] = function (config, r, f, e, o) {
                    var s = u && u(config, r, f, e, o);
                    return s !== !0 && t["_" + i](config, r, f, e, o), s
                }), t
            }({
                instrumentationKey: '@(iKey)',
                samplingPercentage: @(samplingPct)
            });

            window.appInsights = appInsights;
            appInsights.trackPageView();
        </script>
    }
}

@helper ReleaseTag()
{
    // Get Version info and gallery brand name
    var ver = ApplicationVersionHelper.GetVersion();
    var config = DependencyResolver.Current.GetService<IGalleryConfigurationService>();
    string brand = config == null ? "" : config.Current.Brand;

    <p id="releaseTag">
        This is the @brand
        @if (ver.Present)
        {
            @: version @ver.Version.
            if(!String.IsNullOrEmpty(ver.ShortCommit)) {
                <text>
                    Deployed from
                    @if(ver.CommitUri != null) {
                        @: <a href="@ver.CommitUri.AbsoluteUri.Replace("git://github.com", "https://github.com")">@ver.ShortCommit</a>.
                    } else {
                        @: @ver.ShortCommit.
                    }
                </text>
            }

            if(!String.IsNullOrEmpty(ver.Branch)) {
                <text>
                    Built on
                    @if(ver.BranchUri != null) {
                        @:<a href="@ver.BranchUri.AbsoluteUri" title="View the branch.">@ver.Branch</a>.
                    } else {
                        @: @ver.Branch.
                    }
                </text>
            }

            if(ver.BuildDateUtc != DateTime.MinValue) {
                @: Built at <span class="s-localtime" data-utc="@ver.BuildDateUtc.ToJavaScriptUTC()">@ver.BuildDateUtc.ToNuGetShortDateString()</span>.
            }
        } else {
            @:.
        }

        @* A little quick-n-dirty code to display the current machine *@
        @* In Azure, we want the Instance ID. The Machine Name is total garbage *@
        You are on @HostMachine.Name.
    </p>
}

@helper AnalyticsScript()
{
    var config = DependencyResolver.Current.GetService<IGalleryConfigurationService>();
    if(config != null) {
        var propertyId = config.Current.GoogleAnalyticsPropertyId;
        if (propertyId != null)
        {
            @Analytics.GetGoogleAsyncHtml(propertyId)
        }
    }
}

@helper AccordionBar(
    string groupName,
    WebViewPage page,
    string title,
    string subtitle = null,
    bool enabled = true,
    string formModelStatePrefix = null,
    Func<AccordionHelper, HelperResult> actions = null,
    Func<AccordionHelper, HelperResult> content = null
)
{
Func<AccordionHelper, HelperResult> titleTemplate = null;
if (!string.IsNullOrEmpty(title))
{
    titleTemplate = new Func<AccordionHelper, HelperResult>(@<text>@title</text>);
    }

    Func<AccordionHelper, HelperResult> subtitleTemplate = null;
    if (!string.IsNullOrEmpty(subtitle))
    {
        subtitleTemplate = new Func<AccordionHelper, HelperResult>(@<text>@subtitle</text>);
    }

    @AccordionBar(groupName,
        page,
        titleTemplate,
        subtitleTemplate,
        enabled,
        formModelStatePrefix,
        actions,
        content)
}

@helper AccordionBar(
    string groupName,
    WebViewPage page,
    Func<AccordionHelper, HelperResult> title,
    Func<AccordionHelper, HelperResult> subtitle = null,
    bool enabled = true,
    string formModelStatePrefix = null,
    Func<AccordionHelper, HelperResult> actions = null,
    Func<AccordionHelper, HelperResult> content = null,
    bool expanded = false
)
{
    @* Calculate Accordion Index *@
string dataKey = "___AccordionCounter_" + groupName;
int lastId = (int)(HttpContext.Current.Items[dataKey] ?? 0);
int id = lastId + 1;
HttpContext.Current.Items[dataKey] = id;
string name = groupName + "-" + id.ToString();
string actionsId = name + "-actions"; 

var hlp = new AccordionHelper(name, formModelStatePrefix, expanded, page);
    <li id="@hlp.ItemId" class="accordion-item @(enabled ? "accordion-item-enabled" : "accordion-item-disabled")">
        <div class="accordion-item-header">
            @if (actions != null)
            {
                <div class="accordion-item-actions" id="@actionsId" >
                    @actions(hlp)
                </div>
            }
            <span class="accordion-item-title">
                @title(hlp)
            </span>
            @if (subtitle != null)
            {
                <span class="accordion-item-subtitle">
                    @subtitle(hlp)
                </span>
            }
        </div>
        @if (content != null)
        {
            <div id="@hlp.ContentDropDownId" class="accordion-item-content @(!expanded ? hlp.ContentHiddenClass : string.Empty)">
                @content(hlp)
            </div>
        }
    </li>
}

@helper HasError(System.Web.Mvc.ModelStateDictionary modelState, string key)
{
    if (!modelState.IsValid &&
        modelState.ContainsKey(key) &&
        modelState[key].Errors.Any())
    {
        @:has-error
    }
}

@helper ShowErrors(System.Web.Mvc.ModelStateDictionary modelState, string key)
{
    if (!modelState.IsValid && modelState.ContainsKey(key))
    {
        foreach (var error in modelState[key].Errors)
        {
            <span class="help-block">@error.ErrorMessage</span>
        }
    }
}