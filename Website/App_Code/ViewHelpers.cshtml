@using System.Configuration
@using System.Web.Mvc
@using Microsoft.Web.Helpers
@using NuGetGallery
@using Ninject
@using NuGetGallery.Data.Model

@* Generator: MvcHelper Namespace: NuGetGallery*@

@functions {
    public static IConfiguration Configuration
    {
        get { return Container.Kernel.Get<IConfiguration>(); }
    }

    private static Dictionary<string, string> EnvironmentMessages = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        { "Development", "This is a development environment. No data will be preserved." },
        { "Preview", "This is a preview environment. Some data from the main site may exist but data added here will be lost." },
        { "Staging", "This is a staging environment. Some data from the main site may exist but data added here will be lost." }
    };
}

@helper NonProductionBanner() {
    string message;
    if (EnvironmentMessages.TryGetValue(Configuration.EnvironmentName, out message))
    {
        <div class="banner-yellow">
            @message
        </div>
    }
}

@helper PreviousNextPager(IPreviousNextPager pager)
{
    if (pager.HasNextPage || pager.HasPreviousPage)
    {
        <ul class="pager">
            <li class="previous">
                @if (pager.HasPreviousPage)
                {
                    <a href="@pager.PreviousPageUrl" title="Go to the previous page.">Previous</a>
                }
                else
                {
                    <text>Previous</text>
                }
            </li>
            <li class="next">
                @if (pager.HasNextPage)
                {
                    <a href="@pager.NextPageUrl" title="Go to the next page.">Next</a>
                }
                else
                {
                    <text>Next</text>
                }
            </li>
        </ul>
    }
}

@helper Option(string value, string label, string currentValue)
{
    <option value="@value" @if (value == currentValue)
                           {
                               <text>selected="selected"</text>
                           }>@label</option>
}

@helper UploadSequence(int currentStep)
{
    <ol class="sequence">
        @SequenceStep(1, "Upload", currentStep)
        @SequenceStep(2, "Verify Details", currentStep)
        @SequenceStep(3, "Enjoy", currentStep)
    </ol>
    <div class="clear-fix"><!--Sad Panda--></div>
}

@helper SequenceStep(int step, string caption, int currentStep)
{
    if (currentStep > step)
    {
        <li class="past">@caption</li>
    }
    else if (currentStep == step)
    {
        <li class="current">@caption</li>
    }
    else
    {
        <li>@caption</li>
    }
}

@helper OwnersGravatar(IEnumerable<User> owners, int size, UrlHelper url, bool showName = true)
{
    <ul class="owners">
        @foreach (var owner in owners)
        {
            <li>
                @OwnerGravatar(owner, size, url, showName)
            </li>
        }  
    </ul>
}

@helper OwnerGravatar(User owner, int size, UrlHelper url, bool showName = true)
{
    <a class="owner" href="@url.Action(MVC.Users.Profiles(owner.Username))" title="@owner.Username">
        @if (!String.IsNullOrEmpty(owner.EmailAddress))
        {
            @GravatarImage(owner.EmailAddress, owner.Username, size)
        }
        @if (showName)
        {<text>@owner.Username</text>
        }
    </a>
}

@helper GravatarImage(string email, string username, int size)
{
    var gravatarHtml = Gravatar.GetHtml(email, size, "retro", GravatarRating.G, attributes: new { width = size, height = size, title = username, @class = "owner-image" });
    if (gravatarHtml != null && Request.IsSecureConnection)
    {
        gravatarHtml = new HtmlString(gravatarHtml.ToHtmlString().Replace("http://www.gravatar.com/", "https://secure.gravatar.com/"));
    }
    @gravatarHtml
}

@helper ReleaseTag()
{
    // Using ConfigurationManager because these settings are part of the cspkg itself and thus are always in web.config.
    string sha = ConfigurationManager.AppSettings["Gallery.ReleaseSha"];
    string branch = ConfigurationManager.AppSettings["Gallery.ReleaseBranch"];
    string time = ConfigurationManager.AppSettings["Gallery.ReleaseTime"];
    if (!String.IsNullOrEmpty(sha) && !String.IsNullOrEmpty(branch) && !String.IsNullOrEmpty(time))
    {
        <p id="releaseTag">
            Deployed from <a href="https://github.com/NuGet/NuGetGallery/commit/@sha" title="View the commit.">@sha.Substring(0, Math.Min(sha.Length, 10))</a>.
            Originally built on <a href="https://github.com/NuGet/NuGetGallery/branches/@branch" title="View the branch.">@branch</a> 
            at @time.
        </p>
    }
}

@helper AnalyticsScript()
{
    var propertyId = ConfigurationManager.AppSettings["Gallery:GoogleAnalyticsPropertyId"];
    if (propertyId != null)
    {
        @Analytics.GetGoogleHtml(propertyId)
    }
}