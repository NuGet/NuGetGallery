<Project>

  <PropertyGroup>
    <Authors>.NET Foundation</Authors>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/NuGet/NuGetGallery</PackageProjectUrl>
    <Copyright>Â© .NET Foundation. All rights reserved.</Copyright>
    <Company>.NET Foundation</Company>
    <NeutralLanguage>en-US</NeutralLanguage>

    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols Condition="'$(IncludeSymbols)' == ''">true</IncludeSymbols>
    <SymbolPackageFormat Condition="'$(SymbolPackageFormat)' == ''">snupkg</SymbolPackageFormat>
    <LangVersion>latest</LangVersion>

    <!--
      Our builds generate a file containing the desired assembly version attributes.
      To prevent duplicate attribute compilation errors, disable the SDK's attributes.
      See: https://github.com/dotnet/sdk/blob/2df7f13c8c25e36e3620b62a420bc6b733e5bbb4/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.GenerateAssemblyInfo.targets#L65-L99
    -->
    <GenerateAssemblyFileVersionAttribute>false</GenerateAssemblyFileVersionAttribute>
    <GenerateAssemblyInformationalVersionAttribute>false</GenerateAssemblyInformationalVersionAttribute>
    <GenerateAssemblyVersionAttribute>false</GenerateAssemblyVersionAttribute>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="MicroBuild.Core">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.SourceLink.GitHub">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <Import Project="$(NuGetCodeAnalyzerExtensions)" Condition="'$(NuGetCodeAnalyzerExtensions)' != '' And Exists('$(NuGetCodeAnalyzerExtensions)')" />

  <!-- NuGet signing block: start -->
  <PropertyGroup>
    <SignPath>build</SignPath>
    <SignPath Condition="'$(BUILD_SOURCESDIRECTORY)' != ''">$(BUILD_SOURCESDIRECTORY)\build</SignPath>
    <SignPath Condition="'$(NuGetBuildPath)' != ''">$(NuGetBuildPath)</SignPath>
    <SignType Condition="'$(SignType)' == ''">none</SignType>
  </PropertyGroup>
  <Import Project="sign.thirdparty.props" />
  <Import Project="$(SignPath)\sign.targets" Condition="Exists('$(SignPath)\sign.targets')" />
  <Import Project="$(SignPath)\sign.microbuild.targets" Condition="Exists('$(SignPath)\sign.microbuild.targets')" />
  <!-- NuGet signing block: end -->

  <PropertyGroup>
    <!-- Enabled for SDK-based web projects. -->
    <UseNuGetBuildExtensions Condition="'$(UseNuGetBuildExtensions)' == '' And '$(UsingMicrosoftNETSdkWeb)' == 'true'">true</UseNuGetBuildExtensions>
    <!-- Enabled for EXE (console app) projects, which are jobs. -->
    <UseNuGetBuildExtensions Condition="'$(UseNuGetBuildExtensions)' == '' And '$(UsingMicrosoftNETSdk)' == 'true' And '$(OutputType)' == 'Exe'">true</UseNuGetBuildExtensions>
    <!-- Other projects can opt in by setting the UseNuGetBuildExtensions property to true. -->
  </PropertyGroup>
  <Import Project="$(NuGetBuildExtensions)" Condition="'$(UseNuGetBuildExtensions)' == 'true' And '$(NuGetBuildExtensions)' != '' And Exists('$(NuGetBuildExtensions)')" />

</Project>